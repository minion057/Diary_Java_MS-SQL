
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import static java.lang.Thread.sleep;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.Action;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.border.LineBorder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import static javax.swing.text.StyleConstants.Bold;
import javax.swing.text.StyledEditorKit;

public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    DB_MAN DBM = new DB_MAN(); //DB_MAN 객체
    GregorianCalendar gregCal = new GregorianCalendar(); //GregorianCalendar 사용하기 위한 객체
    Boolean idcheck = false, emailcheck = false;
    //false : 확인안함 true :확인함
    static public String ID;
    int realYear, realMonth, realDay, calYear, calMonth;
    //real >> 오늘 날짜 | cal >> 달력이 보여주는 날짜
    int selectedDate, selectedMonth, selectedYear;
    //selected >> 달력테이블에서 선택한 날짜
    int editrow; //스케줄 수정할 열 저장
    
    public MainFrame() {
        initComponents();
        
        //MainFrame 배경색을 흰색으로 함
        this.getContentPane().setBackground(Color.white);
        //panel을 구분짓기위해 tabpane만 겉에 선을 그려준다
        jTabbedPane1.setBorder(new LineBorder(Color.BLACK,1));
        //Calendar 배경색을 흰색으로 함
        sulblAthide.setVisible(false);
        sutxfEmailkind.setVisible(false);
        fitxfEmailkind.setVisible(false);
        fptxfEmailkind.setVisible(false);
        DiaryFrame.getContentPane().setBackground(Color.white); //배경 흰색
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CalFrame = new javax.swing.JFrame();
        jScrollPane2 = new javax.swing.JScrollPane();
        calTable = new javax.swing.JTable();
        cbYear = new javax.swing.JComboBox<>();
        btNextYear = new javax.swing.JButton();
        btPrevYear = new javax.swing.JButton();
        btPrevMonth = new javax.swing.JButton();
        btNextMonth = new javax.swing.JButton();
        lblMonth = new javax.swing.JLabel();
        lblleft_c = new javax.swing.JLabel();
        memoPanel = new javax.swing.JPanel();
        btAdd = new javax.swing.JButton();
        btDel = new javax.swing.JButton();
        btClear = new javax.swing.JButton();
        lblSelectday = new javax.swing.JLabel();
        lbltime = new javax.swing.JLabel();
        lblAddSchedule = new javax.swing.JLabel();
        rbtTodo = new javax.swing.JRadioButton();
        rbtAnniversary = new javax.swing.JRadioButton();
        btDiary = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        TShowschedule = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        taTodo = new javax.swing.JTextArea();
        lblDday = new javax.swing.JLabel();
        btEdit = new javax.swing.JButton();
        btToday = new javax.swing.JButton();
        lbltoday = new javax.swing.JLabel();
        lbluserName_cal = new javax.swing.JLabel();
        btSetting = new javax.swing.JButton();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        mnuFile_Exit = new javax.swing.JMenuItem();
        mnuFile_Set = new javax.swing.JMenuItem();
        mnuFont = new javax.swing.JMenu();
        mnuFont_Arial = new javax.swing.JMenuItem();
        mnuFont_Gungseo = new javax.swing.JMenuItem();
        mnuFont_Dotum = new javax.swing.JMenuItem();
        buttonGroup1 = new javax.swing.ButtonGroup();
        SetFrame = new javax.swing.JFrame();
        lblTitle3 = new javax.swing.JLabel();
        lblTitle4 = new javax.swing.JLabel();
        lbluserName_set = new javax.swing.JLabel();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        Helppanel = new javax.swing.JPanel();
        lblHelp = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        UserEditPanel = new javax.swing.JPanel();
        jTabbedPane = new javax.swing.JTabbedPane();
        CEmailPanel = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        etxfEmail = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        ecbEmail = new javax.swing.JComboBox<>();
        etxfEmailKind = new javax.swing.JTextField();
        btEmailChange = new javax.swing.JButton();
        CPWPanel = new javax.swing.JPanel();
        btPWChange = new javax.swing.JButton();
        txfPWCchange = new javax.swing.JPasswordField();
        txfPWchange = new javax.swing.JPasswordField();
        lblPwchange = new javax.swing.JLabel();
        lblPwchange1 = new javax.swing.JLabel();
        Withdrawalpanel = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        btWithdrawal = new javax.swing.JButton();
        DiaryFrame = new javax.swing.JFrame();
        btnmodify = new javax.swing.JButton();
        btndelete = new javax.swing.JButton();
        btnwrite = new javax.swing.JButton();
        btnexit = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        title = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        contents = new javax.swing.JTextArea();
        txtdate = new javax.swing.JLabel();
        lblTitle2 = new javax.swing.JLabel();
        lblTitle1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        LoginPanel = new javax.swing.JPanel();
        lglblID = new javax.swing.JLabel();
        lglblPW = new javax.swing.JLabel();
        lgbtSignup = new javax.swing.JButton();
        lglblSignup = new javax.swing.JLabel();
        lgtxfPW = new javax.swing.JPasswordField();
        lgtxfID = new javax.swing.JTextField();
        lgbtLogin = new javax.swing.JButton();
        lgbtFind = new javax.swing.JButton();
        lgUserimg = new javax.swing.JButton();
        lglblLogin = new javax.swing.JLabel();
        SignUpPanel = new javax.swing.JPanel();
        sulblSignup = new javax.swing.JLabel();
        sulblID = new javax.swing.JLabel();
        sulblPW = new javax.swing.JLabel();
        sutxfID = new javax.swing.JTextField();
        sutxfPW = new javax.swing.JPasswordField();
        subtIDC = new javax.swing.JButton();
        sulblPWC = new javax.swing.JLabel();
        sutxfPWC = new javax.swing.JPasswordField();
        subtSingup = new javax.swing.JButton();
        sulblEmail = new javax.swing.JLabel();
        sulblAt = new javax.swing.JLabel();
        sucbEmail = new javax.swing.JComboBox<>();
        sulblNotice = new javax.swing.JLabel();
        sutxfEmail = new javax.swing.JTextField();
        sutxfEmailkind = new javax.swing.JTextField();
        sulblAthide = new javax.swing.JLabel();
        subtEmailC = new javax.swing.JButton();
        FindPanel = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        FIPanel = new javax.swing.JPanel();
        filblEmail = new javax.swing.JLabel();
        filblFind = new javax.swing.JLabel();
        filblAt = new javax.swing.JLabel();
        ficbEmail = new javax.swing.JComboBox<>();
        filblNotice = new javax.swing.JLabel();
        fibtFind = new javax.swing.JButton();
        fitxfEmail = new javax.swing.JTextField();
        fitxfEmailkind = new javax.swing.JTextField();
        FPPanel = new javax.swing.JPanel();
        fplblNotice = new javax.swing.JLabel();
        fpbtFind = new javax.swing.JButton();
        fplblID = new javax.swing.JLabel();
        fptxfID = new javax.swing.JTextField();
        fplblFind = new javax.swing.JLabel();
        fplblEmail = new javax.swing.JLabel();
        fptxfEmail = new javax.swing.JTextField();
        fplblAt = new javax.swing.JLabel();
        fpcbEmail = new javax.swing.JComboBox<>();
        fptxfEmailkind = new javax.swing.JTextField();
        lblleft_m = new javax.swing.JLabel();

        CalFrame.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        CalFrame.setTitle("Calendar");
        CalFrame.setResizable(false);
        CalFrame.setSize(new java.awt.Dimension(1250, 630));
        CalFrame.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                CalFrameformWindowOpened(evt);
            }
        });

        calTable.setModel(new DefaultTableModel());
        calTable.setToolTipText("달력");
        calTable.setEnabled(false);
        calTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                calTablecalMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(calTable);

        cbYear.setToolTipText("년도");
        cbYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbYearActionPerformed(evt);
            }
        });

        btNextYear.setText(">>");
        btNextYear.setToolTipText("다음 년도로 이동");
        btNextYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btNextYearActionPerformed(evt);
            }
        });

        btPrevYear.setText("<<");
        btPrevYear.setToolTipText("이전 년도로 이동");
        btPrevYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPrevYearActionPerformed(evt);
            }
        });

        btPrevMonth.setText("<");
        btPrevMonth.setToolTipText("이전 달로 이동");
        btPrevMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPrevMonthActionPerformed(evt);
            }
        });

        btNextMonth.setText(">");
        btNextMonth.setToolTipText("다음 달로 이동");
        btNextMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btNextMonthActionPerformed(evt);
            }
        });

        lblMonth.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMonth.setText("Month");
        lblMonth.setToolTipText("현재 보이는 달력의 달");

        lblleft_c.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblleft_c.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/left.png"))); // NOI18N

        memoPanel.setBackground(new java.awt.Color(255, 255, 255));
        memoPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btAdd.setText("add");
        btAdd.setToolTipText("현재 적으신 스케줄을 추가합니다.");
        btAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddActionPerformed(evt);
            }
        });

        btDel.setText("del");
        btDel.setToolTipText("현재 선택한 스케줄을 지웁니다.");
        btDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDelActionPerformed(evt);
            }
        });

        btClear.setText("clear");
        btClear.setToolTipText("현재 입력하고 있는 스케줄 창을 지웁니다.");
        btClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btClearActionPerformed(evt);
            }
        });

        lblSelectday.setFont(new java.awt.Font("굴림", 1, 18)); // NOI18N
        lblSelectday.setText("select day");
        lblSelectday.setToolTipText("선택한 날짜");

        lbltime.setFont(new java.awt.Font("굴림", 0, 14)); // NOI18N
        lbltime.setText("time");
        lbltime.setToolTipText("현재 시간");

        lblAddSchedule.setText("Add Schedule");
        lblAddSchedule.setToolTipText("선택된 날짜에 스케줄을 추가해봅시다.");

        buttonGroup1.add(rbtTodo);
        rbtTodo.setSelected(true);
        rbtTodo.setText("to do");
        rbtTodo.setToolTipText("단순히 할 일이면 이 버튼을 누르세요.");

        buttonGroup1.add(rbtAnniversary);
        rbtAnniversary.setText("Anniversary");
        rbtAnniversary.setToolTipText("기념일이라면 이 버튼을 누르세요.");

        btDiary.setText("Write a diary");
        btDiary.setToolTipText("선택한 날짜에 일기를 쓰기");
        btDiary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDiaryActionPerformed(evt);
            }
        });

        TShowschedule.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Index", "Todo", "Anniversary"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Byte.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TShowschedule.setToolTipText("스케줄");
        TShowschedule.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TShowscheduleMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(TShowschedule);

        taTodo.setColumns(20);
        taTodo.setLineWrap(true);
        taTodo.setRows(5);
        taTodo.setToolTipText("스케줄 추가할 내용");
        jScrollPane1.setViewportView(taTodo);

        lblDday.setText("dday");
        lblDday.setToolTipText("오늘 날짜 기준으로 선택한 날짜의 디데이");

        btEdit.setText("edit");
        btEdit.setToolTipText("현재 선택한 스케줄을 적으신 내용으로 수정합니다.");
        btEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEditActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout memoPanelLayout = new javax.swing.GroupLayout(memoPanel);
        memoPanel.setLayout(memoPanelLayout);
        memoPanelLayout.setHorizontalGroup(
            memoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(memoPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(memoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(memoPanelLayout.createSequentialGroup()
                        .addComponent(lblSelectday)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblDday))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btDiary))
                .addGroup(memoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(memoPanelLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(memoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, memoPanelLayout.createSequentialGroup()
                                .addComponent(lblAddSchedule)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btClear))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, memoPanelLayout.createSequentialGroup()
                                .addComponent(btDel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btEdit)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btAdd))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, memoPanelLayout.createSequentialGroup()
                                .addComponent(rbtTodo)
                                .addGap(18, 18, 18)
                                .addComponent(rbtAnniversary))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, memoPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lbltime)
                        .addGap(113, 113, 113))))
        );
        memoPanelLayout.setVerticalGroup(
            memoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(memoPanelLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(memoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSelectday)
                    .addComponent(lbltime)
                    .addComponent(lblDday))
                .addGap(18, 18, 18)
                .addGroup(memoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(memoPanelLayout.createSequentialGroup()
                        .addGroup(memoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblAddSchedule)
                            .addComponent(btClear))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(memoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbtAnniversary)
                            .addComponent(rbtTodo)))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGroup(memoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(memoPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(memoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btDel)
                            .addComponent(btAdd)
                            .addComponent(btEdit)))
                    .addGroup(memoPanelLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(btDiary)))
                .addContainerGap())
        );

        btToday.setText("Today");
        btToday.setToolTipText("오늘 날짜로 이동하기");
        btToday.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btTodayActionPerformed(evt);
            }
        });

        lbltoday.setFont(new java.awt.Font("굴림", 0, 14)); // NOI18N
        lbltoday.setText("show today");
        lbltoday.setToolTipText("오늘의 날짜");

        lbluserName_cal.setFont(new java.awt.Font("굴림", 0, 24)); // NOI18N
        lbluserName_cal.setText("username");
        lbluserName_cal.setToolTipText("회원님의 아이디");

        btSetting.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/sswhat.png"))); // NOI18N
        btSetting.setToolTipText("환경 설정");
        btSetting.setBorderPainted(false);
        btSetting.setContentAreaFilled(false);
        btSetting.setFocusPainted(false);
        btSetting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSettingActionPerformed(evt);
            }
        });

        jMenu3.setText("File");

        mnuFile_Exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.ALT_MASK));
        mnuFile_Exit.setText("종료하기");
        mnuFile_Exit.addMenuKeyListener(new javax.swing.event.MenuKeyListener() {
            public void menuKeyPressed(javax.swing.event.MenuKeyEvent evt) {
                mnuFile_ExitMenuKeyPressed(evt);
            }
            public void menuKeyReleased(javax.swing.event.MenuKeyEvent evt) {
            }
            public void menuKeyTyped(javax.swing.event.MenuKeyEvent evt) {
            }
        });
        mnuFile_Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuFile_ExitActionPerformed(evt);
            }
        });
        jMenu3.add(mnuFile_Exit);

        mnuFile_Set.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK));
        mnuFile_Set.setText("환경설정");
        mnuFile_Set.addMenuKeyListener(new javax.swing.event.MenuKeyListener() {
            public void menuKeyPressed(javax.swing.event.MenuKeyEvent evt) {
                mnuFile_SetMenuKeyPressed(evt);
            }
            public void menuKeyReleased(javax.swing.event.MenuKeyEvent evt) {
            }
            public void menuKeyTyped(javax.swing.event.MenuKeyEvent evt) {
            }
        });
        mnuFile_Set.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuFile_SetActionPerformed(evt);
            }
        });
        jMenu3.add(mnuFile_Set);

        jMenuBar2.add(jMenu3);

        mnuFont.setText("Font");

        mnuFont_Arial.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK));
        mnuFont_Arial.setText("Arial");
        mnuFont_Arial.addMenuKeyListener(new javax.swing.event.MenuKeyListener() {
            public void menuKeyPressed(javax.swing.event.MenuKeyEvent evt) {
                mnuFont_ArialMenuKeyPressed(evt);
            }
            public void menuKeyReleased(javax.swing.event.MenuKeyEvent evt) {
            }
            public void menuKeyTyped(javax.swing.event.MenuKeyEvent evt) {
            }
        });
        mnuFont_Arial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuFont_ArialActionPerformed(evt);
            }
        });
        mnuFont.add(mnuFont_Arial);

        mnuFont_Gungseo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.ALT_MASK));
        mnuFont_Gungseo.setText("궁서체");
        mnuFont_Gungseo.addMenuKeyListener(new javax.swing.event.MenuKeyListener() {
            public void menuKeyPressed(javax.swing.event.MenuKeyEvent evt) {
                mnuFont_GungseoMenuKeyPressed(evt);
            }
            public void menuKeyReleased(javax.swing.event.MenuKeyEvent evt) {
            }
            public void menuKeyTyped(javax.swing.event.MenuKeyEvent evt) {
            }
        });
        mnuFont_Gungseo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuFont_GungseoActionPerformed(evt);
            }
        });
        mnuFont.add(mnuFont_Gungseo);

        mnuFont_Dotum.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.ALT_MASK));
        mnuFont_Dotum.setText("돋움체");
        mnuFont_Dotum.addMenuKeyListener(new javax.swing.event.MenuKeyListener() {
            public void menuKeyPressed(javax.swing.event.MenuKeyEvent evt) {
                mnuFont_DotumMenuKeyPressed(evt);
            }
            public void menuKeyReleased(javax.swing.event.MenuKeyEvent evt) {
            }
            public void menuKeyTyped(javax.swing.event.MenuKeyEvent evt) {
            }
        });
        mnuFont_Dotum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuFont_DotumActionPerformed(evt);
            }
        });
        mnuFont.add(mnuFont_Dotum);

        jMenuBar2.add(mnuFont);

        CalFrame.setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout CalFrameLayout = new javax.swing.GroupLayout(CalFrame.getContentPane());
        CalFrame.getContentPane().setLayout(CalFrameLayout);
        CalFrameLayout.setHorizontalGroup(
            CalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CalFrameLayout.createSequentialGroup()
                .addComponent(lblleft_c, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addGroup(CalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CalFrameLayout.createSequentialGroup()
                        .addGroup(CalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(CalFrameLayout.createSequentialGroup()
                                .addComponent(lbltoday)
                                .addGap(74, 74, 74)
                                .addComponent(cbYear, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btToday))
                            .addGroup(CalFrameLayout.createSequentialGroup()
                                .addComponent(btPrevYear, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btPrevMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(33, 33, 33)
                                .addComponent(btNextMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btNextYear, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 434, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                        .addComponent(memoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(29, Short.MAX_VALUE))
                    .addGroup(CalFrameLayout.createSequentialGroup()
                        .addComponent(lbluserName_cal)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btSetting, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(56, 56, 56))))
        );
        CalFrameLayout.setVerticalGroup(
            CalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CalFrameLayout.createSequentialGroup()
                .addGroup(CalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CalFrameLayout.createSequentialGroup()
                        .addGroup(CalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(CalFrameLayout.createSequentialGroup()
                                .addGap(56, 56, 56)
                                .addComponent(lbluserName_cal)
                                .addGap(52, 52, 52))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CalFrameLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(btSetting)
                                .addGap(18, 18, 18)))
                        .addGroup(CalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(CalFrameLayout.createSequentialGroup()
                                .addGroup(CalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(cbYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btToday)
                                    .addComponent(lbltoday))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(CalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btPrevYear)
                                    .addComponent(btPrevMonth)
                                    .addComponent(lblMonth, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btNextMonth)
                                    .addComponent(btNextYear))
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(CalFrameLayout.createSequentialGroup()
                                .addComponent(memoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addComponent(lblleft_c))
                .addGap(9, 9, 9))
        );

        SetFrame.setResizable(false);
        SetFrame.setSize(new java.awt.Dimension(438, 590));
        SetFrame.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                SetFrameWindowOpened(evt);
            }
        });

        lblTitle3.setFont(new java.awt.Font("바탕", 3, 48)); // NOI18N
        lblTitle3.setText("1DAY");
        lblTitle3.setToolTipText("프로그램 이름");

        lblTitle4.setFont(new java.awt.Font("바탕", 3, 48)); // NOI18N
        lblTitle4.setText("1DIARY");
        lblTitle4.setToolTipText("프로그램 이름");

        lbluserName_set.setFont(new java.awt.Font("굴림", 0, 24)); // NOI18N
        lbluserName_set.setText("username");
        lbluserName_set.setToolTipText("회원님의 아이디");

        jTabbedPane3.setToolTipText("");

        Helppanel.setToolTipText("도움말 창");
        Helppanel.setOpaque(false);

        lblHelp.setText("'1 DAY 1 DIARY' 자바로 만든 다이어리 프로그램 입니다.");

        jLabel1.setText("주요 기능");

        jLabel2.setText("01. 오직 회원만 사용 가능");

        jLabel3.setText("02. 아이디 혹은 비밀번호를 잊어버려도 찾을 수 있음");

        jLabel4.setText("03. 메인 화면은 달력은 100년 전부터 100 후까지");

        jLabel5.setText("04. 달력에서 청록색의 굵은 글씨는 해당 날짜에 기념일이 있음");

        jLabel6.setText("05. 달력에서 파랑색 바탕은 선택된 날짜");

        jLabel7.setText("06. 달력 옆은 선택된 날짜에 스케줄을 추가 혹은 삭제, 수정 가능");

        jLabel8.setText("07. 메뉴 클릭 혹은 단축키로 텍스트 입력창 폰트 변경");

        jLabel9.setText("08. 선택한 날짜에 일기 작성 가능");

        jLabel10.setText("09. 회원 정보 수정 가능");

        jLabel11.setText("10. 회원 탈퇴 가능");

        javax.swing.GroupLayout HelppanelLayout = new javax.swing.GroupLayout(Helppanel);
        Helppanel.setLayout(HelppanelLayout);
        HelppanelLayout.setHorizontalGroup(
            HelppanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HelppanelLayout.createSequentialGroup()
                .addGroup(HelppanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(HelppanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(HelppanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(HelppanelLayout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addGroup(HelppanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7)))
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11)))
                    .addGroup(HelppanelLayout.createSequentialGroup()
                        .addGroup(HelppanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(HelppanelLayout.createSequentialGroup()
                                .addGap(150, 150, 150)
                                .addComponent(jLabel1))
                            .addGroup(HelppanelLayout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(lblHelp)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        HelppanelLayout.setVerticalGroup(
            HelppanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HelppanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblHelp)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11)
                .addContainerGap())
        );

        jTabbedPane3.addTab("Help", Helppanel);

        UserEditPanel.setToolTipText("회원 정보 수정 창");
        UserEditPanel.setOpaque(false);

        CEmailPanel.setToolTipText("이메일 변경 창");
        CEmailPanel.setOpaque(false);

        jLabel14.setText("Email");

        etxfEmail.setToolTipText("변경할 이메일의 아이디 부분을 작성해주세요.");
        etxfEmail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                etxfEmailKeyTyped(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("굴림", 0, 14)); // NOI18N
        jLabel15.setText("@");
        jLabel15.setToolTipText("");

        ecbEmail.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "gmail.com", "naver.com", "daum.net", "nate.com", "직접입력" }));
        ecbEmail.setToolTipText("이메일 종류를 선택해주세요.");
        ecbEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ecbEmailActionPerformed(evt);
            }
        });

        etxfEmailKind.setToolTipText("이메일 종류를 입력해주세요.");

        btEmailChange.setText("변경");
        btEmailChange.setToolTipText("이메일 변경하기");
        btEmailChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEmailChangeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CEmailPanelLayout = new javax.swing.GroupLayout(CEmailPanel);
        CEmailPanel.setLayout(CEmailPanelLayout);
        CEmailPanelLayout.setHorizontalGroup(
            CEmailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CEmailPanelLayout.createSequentialGroup()
                .addGroup(CEmailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CEmailPanelLayout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(CEmailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CEmailPanelLayout.createSequentialGroup()
                                .addComponent(jLabel15)
                                .addGap(18, 18, 18)
                                .addGroup(CEmailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(etxfEmailKind, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ecbEmail, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(etxfEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(CEmailPanelLayout.createSequentialGroup()
                        .addGap(126, 126, 126)
                        .addComponent(btEmailChange, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(66, Short.MAX_VALUE))
        );
        CEmailPanelLayout.setVerticalGroup(
            CEmailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CEmailPanelLayout.createSequentialGroup()
                .addContainerGap(60, Short.MAX_VALUE)
                .addGroup(CEmailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(etxfEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(CEmailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(etxfEmailKind, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(CEmailPanelLayout.createSequentialGroup()
                        .addGroup(CEmailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ecbEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15))
                        .addGap(39, 39, 39)))
                .addGap(18, 18, 18)
                .addComponent(btEmailChange, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );

        jTabbedPane.addTab("이메일 변경", CEmailPanel);

        CPWPanel.setToolTipText("암호 변경 창");
        CPWPanel.setOpaque(false);

        btPWChange.setText("변경");
        btPWChange.setToolTipText("암호 변경");
        btPWChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPWChangeActionPerformed(evt);
            }
        });

        txfPWCchange.setToolTipText("변경할 암호를 확인하기 위해 한 번 더 입력하세요.");

        txfPWchange.setToolTipText("변경할 암호를 입력하세요.");

        lblPwchange.setFont(new java.awt.Font("굴림", 1, 14)); // NOI18N
        lblPwchange.setText("PW");
        lblPwchange.setToolTipText("변경할 암호를 입력하세요.");

        lblPwchange1.setFont(new java.awt.Font("굴림", 1, 14)); // NOI18N
        lblPwchange1.setText("CPW");
        lblPwchange1.setToolTipText("변경할 암호를 확인하기 위해 한 번 더 입력하세요.");

        javax.swing.GroupLayout CPWPanelLayout = new javax.swing.GroupLayout(CPWPanel);
        CPWPanel.setLayout(CPWPanelLayout);
        CPWPanelLayout.setHorizontalGroup(
            CPWPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CPWPanelLayout.createSequentialGroup()
                .addGroup(CPWPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CPWPanelLayout.createSequentialGroup()
                        .addGap(131, 131, 131)
                        .addComponent(btPWChange, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(CPWPanelLayout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(CPWPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblPwchange)
                            .addComponent(lblPwchange1))
                        .addGap(18, 18, 18)
                        .addGroup(CPWPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txfPWchange, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txfPWCchange, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(54, Short.MAX_VALUE))
        );
        CPWPanelLayout.setVerticalGroup(
            CPWPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CPWPanelLayout.createSequentialGroup()
                .addContainerGap(73, Short.MAX_VALUE)
                .addGroup(CPWPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txfPWchange, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPwchange))
                .addGap(11, 11, 11)
                .addGroup(CPWPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txfPWCchange, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPwchange1))
                .addGap(26, 26, 26)
                .addComponent(btPWChange, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33))
        );

        jTabbedPane.addTab("암호 변경", CPWPanel);

        javax.swing.GroupLayout UserEditPanelLayout = new javax.swing.GroupLayout(UserEditPanel);
        UserEditPanel.setLayout(UserEditPanelLayout);
        UserEditPanelLayout.setHorizontalGroup(
            UserEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UserEditPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane)
                .addContainerGap())
        );
        UserEditPanelLayout.setVerticalGroup(
            UserEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UserEditPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("User Edit", UserEditPanel);

        Withdrawalpanel.setToolTipText("회원탈퇴창");
        Withdrawalpanel.setOpaque(false);

        jLabel12.setFont(new java.awt.Font("굴림", 1, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 102, 102));
        jLabel12.setText("정말 회원 탈퇴를 하시겠습니까?");

        jLabel13.setText("탈퇴시 전에 있던 정보를 되돌릴 수 없습니다.");

        btWithdrawal.setText("네, 탈퇴합니다");
        btWithdrawal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btWithdrawalActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout WithdrawalpanelLayout = new javax.swing.GroupLayout(Withdrawalpanel);
        Withdrawalpanel.setLayout(WithdrawalpanelLayout);
        WithdrawalpanelLayout.setHorizontalGroup(
            WithdrawalpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WithdrawalpanelLayout.createSequentialGroup()
                .addGroup(WithdrawalpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(WithdrawalpanelLayout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jLabel12))
                    .addGroup(WithdrawalpanelLayout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(jLabel13))
                    .addGroup(WithdrawalpanelLayout.createSequentialGroup()
                        .addGap(118, 118, 118)
                        .addComponent(btWithdrawal)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        WithdrawalpanelLayout.setVerticalGroup(
            WithdrawalpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WithdrawalpanelLayout.createSequentialGroup()
                .addGap(96, 96, 96)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel13)
                .addGap(40, 40, 40)
                .addComponent(btWithdrawal)
                .addContainerGap(90, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Withdrawal", Withdrawalpanel);

        javax.swing.GroupLayout SetFrameLayout = new javax.swing.GroupLayout(SetFrame.getContentPane());
        SetFrame.getContentPane().setLayout(SetFrameLayout);
        SetFrameLayout.setHorizontalGroup(
            SetFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SetFrameLayout.createSequentialGroup()
                .addGroup(SetFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SetFrameLayout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addGroup(SetFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lbluserName_set)
                            .addGroup(SetFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblTitle3, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(SetFrameLayout.createSequentialGroup()
                                    .addGap(81, 81, 81)
                                    .addComponent(lblTitle4, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(SetFrameLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jTabbedPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        SetFrameLayout.setVerticalGroup(
            SetFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SetFrameLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(lblTitle3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblTitle4)
                .addGap(18, 18, 18)
                .addComponent(lbluserName_set)
                .addGap(18, 18, 18)
                .addComponent(jTabbedPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(39, Short.MAX_VALUE))
        );

        jTabbedPane3.getAccessibleContext().setAccessibleName("");

        DiaryFrame.setBackground(new java.awt.Color(255, 255, 255));
        DiaryFrame.setResizable(false);
        DiaryFrame.setSize(new java.awt.Dimension(680, 600));

        btnmodify.setFont(new java.awt.Font("나눔스퀘어", 0, 18)); // NOI18N
        btnmodify.setText("수정");
        btnmodify.setToolTipText("일기 내용을 수정하여 저장합니다.");
        btnmodify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnmodifyActionPerformed(evt);
            }
        });

        btndelete.setFont(new java.awt.Font("나눔스퀘어", 0, 18)); // NOI18N
        btndelete.setText("삭제");
        btndelete.setToolTipText("현재 저장된 일기를 삭제합니다.");
        btndelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btndeleteActionPerformed(evt);
            }
        });

        btnwrite.setFont(new java.awt.Font("나눔스퀘어", 0, 18)); // NOI18N
        btnwrite.setText("작성");
        btnwrite.setToolTipText("현재 작성한 일기를 새로 추가합니다.");
        btnwrite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnwriteActionPerformed(evt);
            }
        });

        btnexit.setFont(new java.awt.Font("나눔스퀘어", 0, 18)); // NOI18N
        btnexit.setText("닫기");
        btnexit.setToolTipText("일기장 화면을 닫습니다.");
        btnexit.setOpaque(false);
        btnexit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnexitActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "제목", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("나눔스퀘어", 0, 18))); // NOI18N
        jPanel1.setToolTipText("제목 입력창");

        title.setToolTipText("일기의 제목을 입력하세요.");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(title, javax.swing.GroupLayout.DEFAULT_SIZE, 509, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "내용", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("나눔스퀘어", 0, 18))); // NOI18N
        jPanel2.setToolTipText("내용 입력창");

        contents.setColumns(20);
        contents.setRows(5);
        contents.setToolTipText("일기의 내용을 작성하세요.");
        jScrollPane3.setViewportView(contents);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 509, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
                .addContainerGap())
        );

        txtdate.setFont(new java.awt.Font("굴림", 1, 18)); // NOI18N
        txtdate.setText("date");
        txtdate.setToolTipText("현재 작성하고 있는 일기의 날짜");

        javax.swing.GroupLayout DiaryFrameLayout = new javax.swing.GroupLayout(DiaryFrame.getContentPane());
        DiaryFrame.getContentPane().setLayout(DiaryFrameLayout);
        DiaryFrameLayout.setHorizontalGroup(
            DiaryFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DiaryFrameLayout.createSequentialGroup()
                .addGroup(DiaryFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(DiaryFrameLayout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addGroup(DiaryFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnexit)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(DiaryFrameLayout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(txtdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnmodify)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btndelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnwrite)))
                .addContainerGap(60, Short.MAX_VALUE))
        );
        DiaryFrameLayout.setVerticalGroup(
            DiaryFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DiaryFrameLayout.createSequentialGroup()
                .addContainerGap(76, Short.MAX_VALUE)
                .addGroup(DiaryFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnmodify)
                    .addComponent(btndelete)
                    .addComponent(btnwrite)
                    .addComponent(txtdate))
                .addGap(36, 36, 36)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnexit)
                .addGap(26, 26, 26))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("1Day_1Diary");
        setBackground(new java.awt.Color(255, 255, 255));
        setName("Main"); // NOI18N
        setResizable(false);
        setSize(new java.awt.Dimension(1000, 595));

        lblTitle2.setFont(new java.awt.Font("바탕", 3, 48)); // NOI18N
        lblTitle2.setText("1DIARY");

        lblTitle1.setFont(new java.awt.Font("바탕", 3, 48)); // NOI18N
        lblTitle1.setText("1DAY");
        lblTitle1.setToolTipText("");

        LoginPanel.setToolTipText("로그인창");
        LoginPanel.setFont(new java.awt.Font("바탕", 1, 24)); // NOI18N
        LoginPanel.setOpaque(false);
        LoginPanel.setPreferredSize(new java.awt.Dimension(420, 275));

        lglblID.setFont(new java.awt.Font("바탕", 0, 24)); // NOI18N
        lglblID.setText("ID :");

        lglblPW.setFont(new java.awt.Font("바탕", 0, 24)); // NOI18N
        lglblPW.setText("PW :");

        lgbtSignup.setText("Sign Up");
        lgbtSignup.setToolTipText("회원가입하기");
        lgbtSignup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lgbtSignupActionPerformed(evt);
            }
        });

        lglblSignup.setText("아직 가입하지 않으셨나요?");
        lglblSignup.setToolTipText("가입을 원하시면 옆의 sign up 버튼을 클릭해주세요.");

        lgtxfPW.setToolTipText("암호를 입력하세요");

        lgtxfID.setToolTipText("아이디를 입력하세요.");
        lgtxfID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                lgtxfIDKeyTyped(evt);
            }
        });

        lgbtLogin.setText("Login");
        lgbtLogin.setToolTipText("로그인하기");
        lgbtLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lgbtLoginActionPerformed(evt);
            }
        });

        lgbtFind.setForeground(new java.awt.Color(153, 153, 153));
        lgbtFind.setText("아이디/비밀번호 찾기");
        lgbtFind.setToolTipText("아이디 혹은 암호를 찾고 싶으시면 클릭하세요.");
        lgbtFind.setBorderPainted(false);
        lgbtFind.setContentAreaFilled(false);
        lgbtFind.setFocusPainted(false);
        lgbtFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lgbtFindActionPerformed(evt);
            }
        });

        lgUserimg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/user2.png"))); // NOI18N
        lgUserimg.setToolTipText("");
        lgUserimg.setBorderPainted(false);
        lgUserimg.setContentAreaFilled(false);
        lgUserimg.setFocusPainted(false);
        lgUserimg.setMinimumSize(new java.awt.Dimension(280, 265));

        lglblLogin.setFont(new java.awt.Font("바탕", 0, 48)); // NOI18N
        lglblLogin.setText("LOGIN");

        javax.swing.GroupLayout LoginPanelLayout = new javax.swing.GroupLayout(LoginPanel);
        LoginPanel.setLayout(LoginPanelLayout);
        LoginPanelLayout.setHorizontalGroup(
            LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(LoginPanelLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(lgUserimg, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(LoginPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LoginPanelLayout.createSequentialGroup()
                                .addGroup(LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lglblPW)
                                    .addComponent(lglblID))
                                .addGap(18, 18, 18)
                                .addGroup(LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lgtxfPW)
                                    .addComponent(lgtxfID, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LoginPanelLayout.createSequentialGroup()
                                .addComponent(lgbtFind, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lgbtLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(LoginPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lglblSignup)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lgbtSignup)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(LoginPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lglblLogin)
                .addGap(130, 130, 130))
        );
        LoginPanelLayout.setVerticalGroup(
            LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LoginPanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(lglblLogin)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(LoginPanelLayout.createSequentialGroup()
                        .addComponent(lgUserimg, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LoginPanelLayout.createSequentialGroup()
                        .addGroup(LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lglblID)
                            .addComponent(lgtxfID, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lglblPW, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lgtxfPW, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lgbtLogin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lgbtFind))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lgbtSignup)
                            .addComponent(lglblSignup))
                        .addGap(18, 18, 18))))
        );

        jTabbedPane1.addTab("Login", LoginPanel);

        SignUpPanel.setToolTipText("회원가입창");
        SignUpPanel.setFont(new java.awt.Font("바탕", 1, 18)); // NOI18N
        SignUpPanel.setOpaque(false);
        SignUpPanel.setPreferredSize(new java.awt.Dimension(420, 275));

        sulblSignup.setFont(new java.awt.Font("바탕", 0, 48)); // NOI18N
        sulblSignup.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sulblSignup.setText("SIGN UP");

        sulblID.setFont(new java.awt.Font("바탕", 0, 18)); // NOI18N
        sulblID.setText("I    D :");

        sulblPW.setFont(new java.awt.Font("바탕", 0, 18)); // NOI18N
        sulblPW.setText("P  W :");

        sutxfID.setToolTipText("가입할 아이디 입력");
        sutxfID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                sutxfIDKeyTyped(evt);
            }
        });

        sutxfPW.setToolTipText("가입할 암호 입력");
        sutxfPW.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                sutxfPWKeyTyped(evt);
            }
        });

        subtIDC.setText("ID Check");
        subtIDC.setToolTipText("아이디 중복 체크");
        subtIDC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subtIDCActionPerformed(evt);
            }
        });

        sulblPWC.setFont(new java.awt.Font("바탕", 0, 18)); // NOI18N
        sulblPWC.setText("PWC :");

        sutxfPWC.setToolTipText("암호 확인 창. 위에 적으신 암호와 똑같이 한 번 더 적어주세요.");
        sutxfPWC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                sutxfPWCKeyTyped(evt);
            }
        });

        subtSingup.setText("Sign Up");
        subtSingup.setToolTipText("회원가입 하기");
        subtSingup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subtSingupActionPerformed(evt);
            }
        });

        sulblEmail.setFont(new java.awt.Font("바탕", 0, 18)); // NOI18N
        sulblEmail.setText("Email");

        sulblAt.setFont(new java.awt.Font("바탕", 0, 18)); // NOI18N
        sulblAt.setText("@");

        sucbEmail.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "gmail.com", "naver.com", "daum.net", "nate.com", "직접 입력" }));
        sucbEmail.setToolTipText("이메일 종류");
        sucbEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sucbEmailActionPerformed(evt);
            }
        });

        sulblNotice.setFont(new java.awt.Font("바탕", 0, 12)); // NOI18N
        sulblNotice.setForeground(new java.awt.Color(255, 102, 102));
        sulblNotice.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        sulblNotice.setText(" ");

        sutxfEmail.setToolTipText("이메일의 아이디 부분을 적어주세요.");
        sutxfEmail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                sutxfEmailKeyTyped(evt);
            }
        });

        sutxfEmailkind.setToolTipText("이메일 종류를 적어주세요.(ex. gmail.com)");
        sutxfEmailkind.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                sutxfEmailkindKeyTyped(evt);
            }
        });

        sulblAthide.setFont(new java.awt.Font("바탕", 0, 18)); // NOI18N
        sulblAthide.setText("@");

        subtEmailC.setText("Email Check");
        subtEmailC.setToolTipText("이메일 중복 체크");
        subtEmailC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subtEmailCActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout SignUpPanelLayout = new javax.swing.GroupLayout(SignUpPanel);
        SignUpPanel.setLayout(SignUpPanelLayout);
        SignUpPanelLayout.setHorizontalGroup(
            SignUpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SignUpPanelLayout.createSequentialGroup()
                .addGap(108, 108, 108)
                .addComponent(sulblSignup)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SignUpPanelLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(SignUpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(sulblNotice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(SignUpPanelLayout.createSequentialGroup()
                        .addGroup(SignUpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(SignUpPanelLayout.createSequentialGroup()
                                .addGroup(SignUpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(sulblPWC, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(sulblPW, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(sulblID))
                                .addGap(18, 18, 18)
                                .addGroup(SignUpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(SignUpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(sutxfPW, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)
                                        .addComponent(sutxfID))
                                    .addComponent(sutxfPWC, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(SignUpPanelLayout.createSequentialGroup()
                                .addComponent(sulblEmail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(SignUpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(SignUpPanelLayout.createSequentialGroup()
                                        .addComponent(sulblAt)
                                        .addGap(18, 18, 18)
                                        .addComponent(sucbEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(sutxfEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sulblAthide)
                        .addGap(3, 3, 3)
                        .addGroup(SignUpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(subtSingup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(subtIDC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(sutxfEmailkind)
                            .addComponent(subtEmailC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(39, 39, 39))
        );
        SignUpPanelLayout.setVerticalGroup(
            SignUpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SignUpPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sulblSignup)
                .addGap(18, 18, 18)
                .addGroup(SignUpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sutxfID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(SignUpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(sulblID)
                        .addComponent(subtIDC)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(SignUpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sulblPW, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(SignUpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(sutxfPW, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(subtEmailC)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(SignUpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(sulblPWC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sutxfPWC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(SignUpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SignUpPanelLayout.createSequentialGroup()
                        .addComponent(sulblEmail)
                        .addGap(14, 14, 14)
                        .addComponent(subtSingup, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(SignUpPanelLayout.createSequentialGroup()
                        .addGroup(SignUpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sutxfEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sutxfEmailkind, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sulblAthide))
                        .addGap(12, 12, 12)
                        .addGroup(SignUpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sulblAt)
                            .addComponent(sucbEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sulblNotice)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("SignUp", SignUpPanel);

        FindPanel.setToolTipText("아이디 혹은 암호 찾기 창");
        FindPanel.setOpaque(false);

        FIPanel.setToolTipText("아이디 찾기 창");
        FIPanel.setOpaque(false);

        filblEmail.setFont(new java.awt.Font("바탕", 0, 18)); // NOI18N
        filblEmail.setText("Email");

        filblFind.setFont(new java.awt.Font("바탕", 0, 48)); // NOI18N
        filblFind.setText("Find ID");

        filblAt.setFont(new java.awt.Font("바탕", 0, 18)); // NOI18N
        filblAt.setText("@");

        ficbEmail.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "gmail.com", "naver.com", "daum.net", "nate.com", "직접입력" }));
        ficbEmail.setToolTipText("이메일 종류를 선택");
        ficbEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ficbEmailActionPerformed(evt);
            }
        });

        filblNotice.setFont(new java.awt.Font("바탕", 0, 12)); // NOI18N
        filblNotice.setForeground(new java.awt.Color(255, 102, 102));
        filblNotice.setText(" ");

        fibtFind.setText("Find");
        fibtFind.setToolTipText("아이디 찾기");
        fibtFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fibtFindActionPerformed(evt);
            }
        });

        fitxfEmail.setToolTipText("이메일 아이디를 입력해주세요.");
        fitxfEmail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fitxfEmailKeyTyped(evt);
            }
        });

        fitxfEmailkind.setToolTipText("이메일 종류를 입력");

        javax.swing.GroupLayout FIPanelLayout = new javax.swing.GroupLayout(FIPanel);
        FIPanel.setLayout(FIPanelLayout);
        FIPanelLayout.setHorizontalGroup(
            FIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FIPanelLayout.createSequentialGroup()
                .addGap(107, 107, 107)
                .addGroup(FIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(FIPanelLayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(filblFind)
                        .addGap(124, 124, 124))
                    .addGroup(FIPanelLayout.createSequentialGroup()
                        .addGroup(FIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(FIPanelLayout.createSequentialGroup()
                                .addComponent(filblNotice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FIPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(fitxfEmailkind, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(17, 17, 17)))
                        .addComponent(fibtFind, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FIPanelLayout.createSequentialGroup()
                        .addGroup(FIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(FIPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(filblAt)
                                .addGap(18, 18, 18)
                                .addComponent(ficbEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(FIPanelLayout.createSequentialGroup()
                                .addComponent(filblEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fitxfEmail)))
                        .addGap(92, 92, 92))))
        );
        FIPanelLayout.setVerticalGroup(
            FIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FIPanelLayout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addComponent(filblFind)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(FIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filblEmail)
                    .addComponent(fitxfEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(FIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(filblAt)
                    .addComponent(ficbEmail, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(fitxfEmailkind, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(FIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filblNotice)
                    .addComponent(fibtFind, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5))
        );

        jTabbedPane2.addTab("ID", FIPanel);

        FPPanel.setToolTipText("암호 찾기 창");
        FPPanel.setOpaque(false);

        fplblNotice.setFont(new java.awt.Font("바탕", 0, 12)); // NOI18N
        fplblNotice.setForeground(new java.awt.Color(255, 102, 102));
        fplblNotice.setText(" ");

        fpbtFind.setText("Find");
        fpbtFind.setToolTipText("암호 찾기");
        fpbtFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fpbtFindActionPerformed(evt);
            }
        });

        fplblID.setFont(new java.awt.Font("바탕", 0, 18)); // NOI18N
        fplblID.setText("I    D :");

        fptxfID.setToolTipText("찾으실 아이디를 입력하세요.");
        fptxfID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fptxfIDKeyTyped(evt);
            }
        });

        fplblFind.setFont(new java.awt.Font("바탕", 0, 48)); // NOI18N
        fplblFind.setText("Find PW");

        fplblEmail.setFont(new java.awt.Font("바탕", 0, 18)); // NOI18N
        fplblEmail.setText("Email");

        fptxfEmail.setToolTipText("해당 아이디로 가입할 때 적으셨던 이메일의 아이디 부분을 적어주세요.");
        fptxfEmail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fptxfEmailKeyTyped(evt);
            }
        });

        fplblAt.setFont(new java.awt.Font("바탕", 0, 18)); // NOI18N
        fplblAt.setText("@");

        fpcbEmail.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "gmail.com", "naver.com", "daum.net", "nate.com", "직접입력" }));
        fpcbEmail.setToolTipText("이메일 종류를 선택해주세요.");
        fpcbEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fpcbEmailActionPerformed(evt);
            }
        });

        fptxfEmailkind.setToolTipText("이메일 종류를 입력해주세요.");

        javax.swing.GroupLayout FPPanelLayout = new javax.swing.GroupLayout(FPPanel);
        FPPanel.setLayout(FPPanelLayout);
        FPPanelLayout.setHorizontalGroup(
            FPPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FPPanelLayout.createSequentialGroup()
                .addGroup(FPPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(FPPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(fplblNotice, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(FPPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fptxfEmailkind, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FPPanelLayout.createSequentialGroup()
                                .addComponent(fplblAt)
                                .addGap(18, 18, 18)
                                .addComponent(fpcbEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(FPPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(FPPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(FPPanelLayout.createSequentialGroup()
                                .addComponent(fplblFind)
                                .addGap(24, 24, 24))
                            .addGroup(FPPanelLayout.createSequentialGroup()
                                .addGroup(FPPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(fplblEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(fplblID))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fptxfID, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(FPPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(fptxfEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(fpbtFind, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );
        FPPanelLayout.setVerticalGroup(
            FPPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FPPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fplblFind)
                .addGap(18, 18, 18)
                .addGroup(FPPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fptxfID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fplblID))
                .addGroup(FPPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(FPPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(fplblNotice)
                        .addGap(12, 12, 12))
                    .addGroup(FPPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(FPPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(FPPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(fpbtFind, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(fptxfEmailkind, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(FPPanelLayout.createSequentialGroup()
                                .addGroup(FPPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(fplblEmail)
                                    .addComponent(fptxfEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(10, 10, 10)
                                .addGroup(FPPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(fplblAt)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FPPanelLayout.createSequentialGroup()
                                        .addGap(4, 4, 4)
                                        .addComponent(fpcbEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(39, 39, 39)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        jTabbedPane2.addTab("PW", FPPanel);

        javax.swing.GroupLayout FindPanelLayout = new javax.swing.GroupLayout(FindPanel);
        FindPanel.setLayout(FindPanelLayout);
        FindPanelLayout.setHorizontalGroup(
            FindPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FindPanelLayout.createSequentialGroup()
                .addComponent(jTabbedPane2)
                .addContainerGap())
        );
        FindPanelLayout.setVerticalGroup(
            FindPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FindPanelLayout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Find", FindPanel);

        lblleft_m.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblleft_m.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/left.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lblleft_m, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(43, 43, 43)
                                .addComponent(lblTitle1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(124, 124, 124)
                                .addComponent(lblTitle2, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 486, Short.MAX_VALUE)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addComponent(lblTitle1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblTitle2)
                .addGap(49, 49, 49)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(lblleft_m)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jTabbedPane1.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //<editor-fold defaultstate="collapsed" desc="Loign Panel Code"> 
    private void lgbtFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lgbtFindActionPerformed
        // Find button >> ID / PW를 찾는 창(panel)로 가게 만든다
        jTabbedPane1.setSelectedIndex(2); //Find는 3번째 탭이므로 index 2
        //jTabbedPane1에 넣었으므로 이것이 선택한 창을 Find로 지정하여 보여준다
    }//GEN-LAST:event_lgbtFindActionPerformed

    private void lgbtLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lgbtLoginActionPerformed
        // Login button
        if(lgtxfPW.getText().length()==0 || lgtxfID.getText().length() == 0){
            //아이디 혹은 암호 입력창에는 빈 공간일때 로그인을 할 수 없으므로
            JOptionPane.showMessageDialog(null, "아이디(ID) 혹은 암호(PW)를 입력해주세요.");
            return; //빈 공간에 입력하라 알리고 나머지 코드를 실행하지 않게 종료시킨다
        }
        String pw="", strQuery = "Select pw From [user] Where id = '";
        //user은 sql에서 예약어(a reserved word)이므로 괄호처리를 해준다
        strQuery += lgtxfID.getText();
        strQuery += "'";
        //id입력창에 입력한 id을 가져와서 pw값만 가져올 것이므로 sql문을 이렇게 작성
        try{
            DBM.dbOpen(); //DB open
            DBM.DB_rs = DBM.DB_stmt.executeQuery(strQuery);
            while(DBM.DB_rs.next()){
                 pw = DBM.DB_rs.getString("pw");
            } //sql실행 결과 값을 돌려 pw에 해당하는 값만 가져와서 저장
            
            DBM.dbClose();
        } catch (Exception e) { //예외발생시 처리
            System.out.println("SQLException : "+e.getMessage());
        }
        if(pw.length() != 0 && pw.equals(lgtxfPW.getText())){
            //sql실행 결과로 가져온 pw값의 길이가 0이라면 null이므로 없는 아이디를 입력한 것이고
            //pw가 존재한다해도 해당 아이디의 비번 값과 일치하지 않는다면 로그인을 할 수 없다.
            //따라서 이 조건문에서는 위의 조건을 배제한 경우기때문에 로그인을 성공한 것이다
            System.out.printf("ID : %s PW : %s 로그인 성공\n", lgtxfID.getText(), pw);
            ID = lgtxfID.getText();
            lbluserName_cal.setText(ID+"'s Diary");
            this.dispose();
            CalFrame.show();
        }else{ //이 경우는 조건에 걸리기 때문에 로그인에 실패한 것이다
            System.out.printf("ID : %s PW : %s 로그인 실패\n", lgtxfID.getText(), lgtxfPW.getText());
            JOptionPane.showMessageDialog(null, "로그인 실패\n아이디 혹은 암호를 확인해주세요.");
        }
    }//GEN-LAST:event_lgbtLoginActionPerformed

    private void lgbtSignupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lgbtSignupActionPerformed
        // Sign UP button >> 회원가입(Sign up) 창(Panel)로 가게 하는 버튼
        jTabbedPane1.setSelectedIndex(1);  //Sign up 탬은 2번째이니 index 1
        //jTabbedPane1에 넣었으므로 이것이 선택한 창을 지정하여 보여준다
    }//GEN-LAST:event_lgbtSignupActionPerformed
// </editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="Sign Up Panel ID Code"> 
    private void subtIDCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subtIDCActionPerformed
        // Check ID button >> 중복된 아이디인지 확인하는 버튼
        // Enabled(false) : 현재 입력한 아이디 중복확인 완료
        // Enabled(true) : 현재 입력한 아이디 중복확인 미완료
        if(sutxfID.getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "아이디를 입력하고 확인해주세요");
            return;
        } sutxfID.setText(sutxfID.getText().replaceAll("[^\\uAC00-\\uD7A3xfe0-9a-zA-Z\\\\s]", ""));
        //특수문자, 공백, 한글 입력시 빈문자로 전환
        //다음 글자가 들어오므로 지워지는 방식(KeyTypeed Event라 마지막에 입력한 것은 gettext로 가져와지지 않아 공백으로 바뀌지 않는다)
        //마지막에 입력한 것은 이벤트로 처리를 하지 못하니 마지막으로 버튼클릭시 특수문자, 공백, 한글을 지운다
        String pw="", strQuery = "Select pw From [user] Where id = '";
        //user은 sql에서 예약어(a reserved word)이므로 괄호처리를 해준다
        strQuery += sutxfID.getText();
        strQuery += "'";
        //id입력창에 입력한 id을 가져와서 pw값만 가져올 것이므로 sql문을 이렇게 작성
        try{
            DBM.dbOpen(); //DB open
            DBM.DB_rs = DBM.DB_stmt.executeQuery(strQuery);
            while(DBM.DB_rs.next()){
                 pw = DBM.DB_rs.getString("pw");
            } //sql실행 결과 값을 돌려 pw에 해당하는 값만 가져와서 저장         
            DBM.dbClose();
        } catch (Exception e) { //예외발생시 처리
            System.out.println("SQLException : "+e.getMessage());
        }
        if(pw.length()==0){
            JOptionPane.showMessageDialog(null, sutxfID.getText()+"\n아이디를 사용하셔도 좋습니다");
            subtIDC.setEnabled(false); //중복확인을 하였으니 아이디 중복확인 버튼을 비활성화시킨다.
            idcheck = true; //아이디 중복확인을 했다는 것을 저장하는 변수를 true로 바꿔준다
        } else {
            JOptionPane.showMessageDialog(null, "중복된 아이디입니다.");
        }
    }//GEN-LAST:event_subtIDCActionPerformed

    private void sutxfIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sutxfIDKeyTyped
        // 아이디 입력창에 입력할 때마다 일어나는 이벤트
        //중복확인을 했는데 수정사항이 있다면 다시 중복을 확인하여야 한다.
        //그러니 아이디 중복확인 버튼을 활성화시킨다
        sutxfID.setText(sutxfID.getText().replaceAll("[^\\uAC00-\\uD7A3xfe0-9a-zA-Z\\\\s]", ""));
        //특수문자, 공백, 한글 입력시 빈문자로 전환
        subtIDC.setEnabled(true);
        idcheck = false;
    }//GEN-LAST:event_sutxfIDKeyTyped

    private void sutxfPWKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sutxfPWKeyTyped
        // 비밀번호 입력창에 입력할 때마다 일어나는 이벤트
        // 암호는 최소 8글자가 되어야함을 알려준다
        sutxfPW.setText(sutxfPW.getText().trim().replaceAll("[ㄱ-ㅎ가-힣]", ""));
        //한글, 공백 입력을 빈문자로 전환
        if(sutxfPW.getText().length() < 7){
            sulblNotice.setText("암호는 최소 8글자가 되어야 합니다");
        } else {
            sulblNotice.setText("");
        }
    }//GEN-LAST:event_sutxfPWKeyTyped
// </editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="Loign Panel ID Code"> 
    private void lgtxfIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lgtxfIDKeyTyped
        // 로그인창 아이디 입력창에 입력할 때마다 일어나는 이벤트
        lgtxfID.setText(lgtxfID.getText().replaceAll("[^\\uAC00-\\uD7A3xfe0-9a-zA-Z\\\\s]", ""));
        //특수문자, 공백, 한글 입력시 빈문자로 전환
    }//GEN-LAST:event_lgtxfIDKeyTyped
// </editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="Sign Up Panel Code"> 
    private void sutxfPWCKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sutxfPWCKeyTyped
        // 비밀번호 확인 입력창에 입력할 때마다 일어나는 이벤트
        sutxfPWC.setText(sutxfPWC.getText().trim().replaceAll("[ㄱ-ㅎ가-힣]", ""));
        //한글, 공백 입력을 빈문자로 전환
    }//GEN-LAST:event_sutxfPWCKeyTyped

    private void sutxfEmailKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sutxfEmailKeyTyped
        // 이메일 입력창에 입력할 때마다 일어나는 이벤트
        sutxfEmail.setText(sutxfEmail.getText().replaceAll("[^\\uAC00-\\uD7A3xfe0-9a-zA-Z\\\\s]", ""));
        //특수문자, 공백, 한글 입력시 빈문자로 전환
    }//GEN-LAST:event_sutxfEmailKeyTyped

    private void subtSingupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subtSingupActionPerformed
        // Sign up button >> 회원가입 버튼
        sulblNotice.setText("");
        sutxfPW.setText(sutxfPW.getText().trim().replaceAll("[ㄱ-ㅎ가-힣]", ""));
        sutxfPWC.setText(sutxfPWC.getText().trim().replaceAll("[ㄱ-ㅎ가-힣]", ""));
        //암호, 암호확인창의 마지막 부분의 특수문자, 한글, 공백 등등 들어와서 안될 것이 입력되면 
        //다음 글자가 들어오므로 지워지는 방식(KeyTypeed Event라 마지막에 입력한 것은 gettext로 가져와지지 않아 공백으로 바뀌지 않는다)
        //따라서 들어오면 안될 것이 마지막에 입력했다면 흔적이 남아있으니 회원가입 버튼을 누르며 다시한번 삭제시킨다
        if(!idcheck){
            JOptionPane.showMessageDialog(null, "아이디 중복확인을 해주세요.");
            return; //아이디 중복체크를 하지 않았으니 알리고 종료
        } if(!emailcheck){
            JOptionPane.showMessageDialog(null, "이메일 중복확인을 해주세요.");
            return; //이메일 중복체크를 하지 않았으니 알리고 종료
        } if(sutxfID.getText().length() ==0 || sutxfPW.getText().length() == 0
                || sutxfPWC.getText().length() == 0 || sutxfEmail.getText().length() == 0){
            JOptionPane.showMessageDialog(null, "모든 입력창을 채워주세요.");
            return; //입력창이 하나라도 비어있다면 채우라고 알린 뒤에 종료
        } if(sutxfPW.getText().length() < 8){
            JOptionPane.showMessageDialog(null, "암호는 최소 8글자입니다.");
            return; //암호를 채우라고 알린 뒤에 종료
        }
        if(!sutxfPW.getText().equals(sutxfPWC.getText())){
            sulblNotice.setText("암호와 암호확인창에 서로 같게 입력해주세요.");
            return; //암호가 서로 다르면 회원가입을 할 수 없으므로 종료
        }
        //여기까지 왔다면 아이디 중복확인도 했고, 암호도 같고, 모든 입력창에 입력이 되어있으니 회원가입 가능
        String strSQL = "Insert into [user] Values (";
        strSQL += "'"+sutxfID.getText()+"', ";
        strSQL += "'"+sutxfPWC.getText()+"', ";
        strSQL += "'"+sutxfEmail.getText()+"@";
        if(sucbEmail.getSelectedIndex() == 4){
            strSQL += sutxfEmailkind.getText();
        } else {
            strSQL += sucbEmail.getItemAt(sucbEmail.getSelectedIndex());
        } strSQL += "')";
        try{
            DBM.dbOpen();
            DBM.DB_stmt.executeUpdate(strSQL);
            DBM.dbClose();
            JOptionPane.showMessageDialog(null, "회원가입 성공!\nID : "+sutxfID.getText()+"\nPW : "+sutxfPW.getText());
        } catch (Exception e) {
            System.out.println("SQLException : "+e.getMessage());
        }
    }//GEN-LAST:event_subtSingupActionPerformed

    private void subtEmailCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subtEmailCActionPerformed
        // email check button >> 이메일이 중복되지 않는지 확인
        // Enabled(false) : 현재 입력한 이메일 중복확인 완료
        // Enabled(true) : 현재 입력한 이메일 중복확인 미완료
        if(sutxfEmail.getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "이메일를 입력하고 확인해주세요");
            return;
        } sutxfEmail.setText(sutxfEmail.getText().replaceAll("[^\\uAC00-\\uD7A3xfe0-9a-zA-Z\\\\s]", ""));
        //특수문자, 공백, 한글 입력시 빈문자로 전환
        //다음 글자가 들어오므로 지워지는 방식(KeyTypeed Event라 마지막에 입력한 것은 gettext로 가져와지지 않아 공백으로 바뀌지 않는다)
        //마지막에 입력한 것은 이벤트로 처리를 하지 못하니 마지막으로 버튼클릭시 특수문자, 공백, 한글을 지운다
        String email = sutxfEmail.getText()+"@";
        if(sucbEmail.getSelectedIndex() != 4) email += sucbEmail.getItemAt(sucbEmail.getSelectedIndex());
        else email += sutxfEmailkind.getText();
        Pattern pattern=Pattern.compile("^[_a-zA-Z0-9-\\.]+@[\\.a-zA-Z0-9-]+\\.[a-zA-Z]+$");
        Matcher match=pattern.matcher(email);
        if(!match.matches()) { //이메일 형식에 맞지 않으면
            sulblNotice.setText("이메일이 유효하지 않습니다");
            return; //라벨로 이메일이 유효하지 않음을 보여주고 종료
        }
        String result="", strQuery = "Select * From [user] Where email = '";
        //user은 sql에서 예약어(a reserved word)이므로 괄호처리를 해준다
        strQuery += email;
        strQuery += "'";
        //email입력창에 입력한 email을 가져와서 모든 값을 가져올 것이므로 sql문을 이렇게 작성
        try{
            DBM.dbOpen(); //DB open
            DBM.DB_rs = DBM.DB_stmt.executeQuery(strQuery);
            while(DBM.DB_rs.next()){
                result = DBM.DB_rs.getString("email");
            } //sql실행 결과 값을 돌려 email에 해당하는 값만 가져와서 저장         
            DBM.dbClose();
        } catch (Exception e) { //예외발생시 처리
            System.out.println("SQLException : "+e.getMessage());
        }
        if(result.length()==0){ //결과가 없다면 중복되지 않은 이메일로
            JOptionPane.showMessageDialog(null, "이메일을 사용하셔도 좋습니다");
            sulblNotice.setText("");
            emailcheck = true; //이메일 중복확인을 했다는 것을 저장하는 변수를 true로 바꿔준다
        } else {
            JOptionPane.showMessageDialog(null, "중복된 이메일입니다.");
        }
    }//GEN-LAST:event_subtEmailCActionPerformed

    private void sucbEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sucbEmailActionPerformed
        // email combobox >> email 종류 선택
        emailcheck = false;
        if(sucbEmail.getSelectedIndex() == 4){ //직접입력 선택
            sutxfEmailkind.setVisible(true); //따라서 이메일 종료 입력창과 @를 활성화 시키고
            sulblAthide.setVisible(true);
            sulblAt.setVisible(false); //콤보박스 옆에 있던 @를 숨긴다
        } else { //나머지 경우 이메일이 존재하는 것 중에 고른 것이므로
            sutxfEmailkind.setVisible(false); //이메일 종료 입력창과 @를 비활성화 시키고
            sulblAthide.setVisible(false);
            sulblAt.setVisible(true); //콤보박스 옆에 있던 @를 보이게 한다
        }
    }//GEN-LAST:event_sucbEmailActionPerformed

    private void sutxfEmailkindKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sutxfEmailkindKeyTyped
        // 이메일 종류를 직접입력하는 창에 입력할 때마다 실행되는 이벤트
        //중복확인을 했어도 무언가 다시 입력하거나 지워졌으므로 다시 확인해야 한다. 따라서
        emailcheck = false; //이메일 중복확인을 했다는 것을 저장하는 변수를 false로 바꿔준다
    }//GEN-LAST:event_sutxfEmailkindKeyTyped
// </editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="Find ID Panel Code"> 
    private void ficbEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ficbEmailActionPerformed
        // email combobox >> email 종류 선택
        if(ficbEmail.getSelectedIndex() == 4){ //직접입력 선택
            filblNotice.setText("");
            fitxfEmailkind.setVisible(true); //따라서 이메일 종료 입력창과 @를 활성화 시킨다
        } else { //나머지 경우 이메일이 존재하는 것 중에 고른 것이므로
            fitxfEmailkind.setVisible(false); //이메일 종료 입력창과 @를 비활성화 시킨다
        }
    }//GEN-LAST:event_ficbEmailActionPerformed

    private void fibtFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fibtFindActionPerformed
        // Find ID button >> 아이디 찾기 버튼
        fitxfEmail.setText(fitxfEmail.getText().replaceAll("[^\\uAC00-\\uD7A3xfe0-9a-zA-Z\\\\s]", ""));
        //특수문자, 공백, 한글 입력시 빈문자로 전환
        //다음 글자가 들어오므로 지워지는 방식(KeyTypeed Event라 마지막에 입력한 것은 gettext로 가져와지지 않아 공백으로 바뀌지 않는다)
        //마지막에 입력한 것은 이벤트로 처리를 하지 못하니 마지막으로 버튼클릭시 특수문자, 공백, 한글을 지운다
        if(fitxfEmail.getText().length() == 0){
            JOptionPane.showMessageDialog(null, "이메일을 제대로 입력해주세요.");
            return;
        } String email = fitxfEmail.getText()+"@";
        if(ficbEmail.getSelectedIndex() != 4) email += ficbEmail.getItemAt(ficbEmail.getSelectedIndex());
        else email += fitxfEmailkind.getText();
        Pattern pattern=Pattern.compile("^[_a-zA-Z0-9-\\.]+@[\\.a-zA-Z0-9-]+\\.[a-zA-Z]+$");
        Matcher match=pattern.matcher(email);
        if(!match.matches()) { //이메일 형식에 맞지 않으면
            JOptionPane.showMessageDialog(null, "이메일이 유효하지 않습니다.");
            return; //라벨로 이메일이 유효하지 않음을 보여주고 종료
        } String id="", strQuery = "Select * From [user] Where email = '";
        //user은 sql에서 예약어(a reserved word)이므로 괄호처리를 해준다
        strQuery += email;
        strQuery += "'";
        //email입력창에 입력한 email을 가져와서 모든 값을 가져올 것이므로 sql문을 이렇게 작성
        try{
            DBM.dbOpen(); //DB open
            DBM.DB_rs = DBM.DB_stmt.executeQuery(strQuery);
            while(DBM.DB_rs.next()){
                id = DBM.DB_rs.getString("id");
            } //sql실행 결과 값을 돌려 email에 해당하는 값만 가져와서 저장         
            DBM.dbClose();
        } catch (Exception e) { //예외발생시 처리
            System.out.println("SQLException : "+e.getMessage());
        }
        if(id.length()==0){ //결과가 없다면 존재하지 않은 이메일로
            JOptionPane.showMessageDialog(null, "이메일이 존재하지 않습니다");
        } else {
            JOptionPane.showMessageDialog(null, "회원님의 아이디는 '"+id+"'입니다.");
        }
    }//GEN-LAST:event_fibtFindActionPerformed

    private void fitxfEmailKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fitxfEmailKeyTyped
        // email 입력창에 입력할 때마다 실행되는 이벤트
        fitxfEmail.setText(fitxfEmail.getText().replaceAll("[^\\uAC00-\\uD7A3xfe0-9a-zA-Z\\\\s]", ""));
    }//GEN-LAST:event_fitxfEmailKeyTyped
// </editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="Find PW Panel Code"> 
    private void fptxfIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fptxfIDKeyTyped
        // ID 입력창에 입력할 때마다 실행되는 이벤트
        fptxfID.setText(fptxfID.getText().replaceAll("[^\\uAC00-\\uD7A3xfe0-9a-zA-Z\\\\s]", ""));
    }//GEN-LAST:event_fptxfIDKeyTyped

    private void fpbtFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fpbtFindActionPerformed
        // Find PW button >> 입력한 아이디가 존재하면 비밀번호를 알려주는 버튼
        fptxfID.setText(fptxfID.getText().replaceAll("[^\\uAC00-\\uD7A3xfe0-9a-zA-Z\\\\s]", ""));
        fptxfEmail.setText(fptxfEmail.getText().replaceAll("[^\\uAC00-\\uD7A3xfe0-9a-zA-Z\\\\s]", ""));
        //특수문자, 공백, 한글 입력시 빈문자로 전환
        //다음 글자가 들어오므로 지워지는 방식(KeyTypeed Event라 마지막에 입력한 것은 gettext로 가져와지지 않아 공백으로 바뀌지 않는다)
        //마지막에 입력한 것은 이벤트로 처리를 하지 못하니 마지막으로 버튼클릭시 특수문자, 공백, 한글을 지운다
        if(fptxfEmail.getText().length() == 0 || fptxfID.getText().length() == 0){
            JOptionPane.showMessageDialog(null, "입력창을 제대로 입력해주세요.");
            return;
        } String email = fptxfEmail.getText()+"@";
        if(fpcbEmail.getSelectedIndex() != 4) email += fpcbEmail.getItemAt(fpcbEmail.getSelectedIndex());
        else email += fptxfEmailkind.getText();
        Pattern pattern=Pattern.compile("^[_a-zA-Z0-9-\\.]+@[\\.a-zA-Z0-9-]+\\.[a-zA-Z]+$");
        Matcher match=pattern.matcher(email);
        if(!match.matches()) { //이메일 형식에 맞지 않으면
            JOptionPane.showMessageDialog(null, "이메일이 유효하지 않습니다.");
            return; //라벨로 이메일이 유효하지 않음을 보여주고 종료
        } String id="", pw ="", strQuery = "Select * From [user] Where email = '";
        //user은 sql에서 예약어(a reserved word)이므로 괄호처리를 해준다
        strQuery += email;
        strQuery += "'";
        //email입력창에 입력한 email을 가져와서 모든 값을 가져올 것이므로 sql문을 이렇게 작성
        try{
            DBM.dbOpen(); //DB open
            DBM.DB_rs = DBM.DB_stmt.executeQuery(strQuery);
            while(DBM.DB_rs.next()){
                id = DBM.DB_rs.getString("id");
                email = DBM.DB_rs.getString("email");
                pw = DBM.DB_rs.getString("pw");
            } //sql실행 결과 값을 돌려 email에 해당하는 값만 가져와서 저장         
            DBM.dbClose();
        } catch (Exception e) { //예외발생시 처리
            System.out.println("SQLException : "+e.getMessage());
        }
        if(id.length()==0){ //결과가 없다면 존재하지 않은 이메일로
            JOptionPane.showMessageDialog(null, "존재하지 않는 회원입니다.");
            System.out.println("이메일 존재 X");
        } else if(!id.equals(fptxfID.getText())){
            JOptionPane.showMessageDialog(null, "존재하지 않는 회원입니다.");
            System.out.println("아이디 존재 X");
        } else {
            JOptionPane.showMessageDialog(null, "회원님의 아이디는 '"+id+"', 암호는 '"+pw+"'입니다.");
        }
    }//GEN-LAST:event_fpbtFindActionPerformed

    private void fptxfEmailKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fptxfEmailKeyTyped
        // Email 입력창에 입력할 때마다 실행되는 이벤트
        fptxfID.setText(fptxfID.getText().replaceAll("[^\\uAC00-\\uD7A3xfe0-9a-zA-Z\\\\s]", ""));
    }//GEN-LAST:event_fptxfEmailKeyTyped

    private void fpcbEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fpcbEmailActionPerformed
        // email combobox >> email 종류 선택
        if(fpcbEmail.getSelectedIndex() == 4){ //직접입력 선택
            fplblNotice.setText("");
            fptxfEmailkind.setVisible(true); //따라서 이메일 종료 입력창과 @를 활성화 시킨다
        } else { //나머지 경우 이메일이 존재하는 것 중에 고른 것이므로
            fptxfEmailkind.setVisible(false); //이메일 종료 입력창과 @를 비활성화 시킨다
        }
    }//GEN-LAST:event_fpcbEmailActionPerformed
// </editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="Cal+Sche Code"> 
    private void calTablecalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_calTablecalMouseClicked
        //Calendar + Schedule
        int row=calTable.rowAtPoint(evt.getPoint());          // 마우스가 있는, 즉 선택한(클릭) 행을 가져옴
        int col= calTable.columnAtPoint(evt.getPoint());      //마우스가 있는, 즉 선택한(클릭) 열을 가져옴

        try{
            selectedDate=Integer.parseInt(calTable.getValueAt(row, col).toString());
            //선택한 행과 열에 있는 값을 정수형으로 바꾸어 선택한 날짜(일)를 저장하는 변수에 넣는다
        }catch(Exception e) { //단, null값인 날짜가 없는 행과 열을 선택했을 수도 있으므로 예외처리를 한다
            selectedDate=0; //예외발생시 선택된 날(일)을 0으로 정한다
        }selectedMonth=getMonth(lblMonth.getText()); 
        //선택한 날짜(월)는 달력이 보여주고 있는 월을 표시하는 라벨의 글자를 가져와 getMonth 메소드로 숫자로 변경한다
        try {
            selectedYear=Integer.parseInt(cbYear.getSelectedItem().toString());
            //콤보박스에서 선택된 년도를 정수형으로 바꾸어 선택한 날짜(년)를 저장하는 변수에 넣는다
        } catch(Exception ex) {
            selectedYear=realYear; //예외발생시 현재 년도로 지정
        } if(selectedDate>=1 && selectedDate<=31 && selectedMonth>=1 && selectedMonth<=12) { //1~31일 클릭시
            //존재하는 날짜 클릭시 실행할 코드
            lblSelectday.setText(selectedYear+"."+selectedMonth+"."+selectedDate);
            //선택된 날짜를 보여주는 라벨을 선택된 날로 설정
            refreshCal(selectedMonth-1, selectedYear); //선택된 날짜의 색을 바꿔주기 위해 다시 달력을 셋팅한 후 보여준다
            
            scheduleshow(selectedYear, selectedMonth, selectedDate);
            //해당 날짜의 스케줄을 보여준다
            
        } else { //그 외 존재하지 않는 날짜를 클릭하게 되면 존재하지 않는 날이라고 알린다
            JOptionPane.showMessageDialog(null,"존재하지 않는 날짜입니다.");
        }

    }//GEN-LAST:event_calTablecalMouseClicked

    private void cbYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbYearActionPerformed
        calYear=Integer.parseInt(cbYear.getSelectedItem().toString()); //콤보박스에서 선택된 년도를 가져와 숫자로 바꾼뒤 변수에 저장
        //콤보박스 아이템들은 다 숫자로 적혀있으므로 예외처리는 하지 않음
        refreshCal(calMonth, calYear); //선택된 년도가 바뀌었으니 다시 달력을 계산해 보여준다
    }//GEN-LAST:event_cbYearActionPerformed

    private void btNextYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btNextYearActionPerformed
        //다음 년도로 가는 버튼 클릭시
        if(calYear==realYear+100) { 
            //일단 콤보박스에 현재 년도에서 100년 많은 년도까지만 있으므로 선택된 년도가 현재보다 100 많으면
            btNextYear.setEnabled(false); //그 다음년도로 넘어갈 수 없게 함
        }
        calYear+=1; //다음 년도로 가는 버튼을 눌렀으니 선택된 년도, 즉 보여주는 년도를 저장하는 변수에 1을 더한다
        refreshCal(calMonth,calYear); //년도가 바뀌었으니 다시 계산해 달력을 보여준다
    }//GEN-LAST:event_btNextYearActionPerformed

    private void btPrevYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPrevYearActionPerformed
        //이전 년도로 가는 버튼 클릭시
        if(calYear==realYear-100) { 
            //일단 콤보박스에 현재 년도에서 100년 적은 년도까지만 있으므로 선택된 년도가 현재보다 100 적으면
            btPrevYear.setEnabled(false); //그 이전 년도로 넘어갈 수 없게 함
        }
        calYear-=1; //이전 년도로 가는 버튼을 눌렀으니 선택된 년도, 즉 보여주는 년도를 저장하는 변수에 1을 뺀다
        refreshCal(calMonth,calYear); //년도가 바뀌었으니 다시 계산해 달력을 보여준다
    }//GEN-LAST:event_btPrevYearActionPerformed

    private void btPrevMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPrevMonthActionPerformed
        //이전 달로 가는 버튼 클릭시
        if(calMonth==0) { //보여지는 달이 0, 즉 1월이라면
            calMonth=11; //달력에 보여지는 달을 11로, 즉 12월로 설정한다
            //refreshCal은 달을 0~11로 계산한다
            //즉 1월에서 12월이 아닌 각 달에서 1을 뺀 값을 해야 정확해진다
            calYear-=1; //그리고 1월에서 작년 12월로 가는 것이므로 달력의 년도를 작년으로 설정, 즉 1을 뺀다
        } else { //1월이 아니라면
            calMonth-=1; //달력을 보여주는 달의 변수에서 1을 뺀다
        } refreshCal(calMonth, calYear); //달이 바뀌었으니 다시 계산해 달력을 보여준다
    }//GEN-LAST:event_btPrevMonthActionPerformed

    private void btNextMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btNextMonthActionPerformed
        //다음 달로 가는 버튼 클릭시
        if(calMonth==11) { //보여지는 달이 11, 즉 12월 이라면
            calMonth=0;//달력에 보여지는 달을 0으로, 즉 1월로 설정한다
            //refreshCal은 달을 0~11로 계산한다
            //즉 1월에서 12월이 아닌 각 달에서 1을 뺀 값을 해야 정확해진다
            calYear+=1; //그리고 12월에서 내년 1월로 가는 것이므로 달력의 년도를 내년으로 설정, 즉 1을 더한다
        } else {
            calMonth+=1; //달력을 보여주는 달의 변수에서 1을 뺀다
        } refreshCal(calMonth, calYear); //달이 바뀌었으니 다시 계산해 달력을 보여준다
    }//GEN-LAST:event_btNextMonthActionPerformed

    private void CalFrameformWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_CalFrameformWindowOpened
        //CalFrame이 열릴 때 실행되는 코드
        ThreadConrol threadCnl = new ThreadConrol();
	threadCnl.start();
        //실시간으로 시간을 보여주기 위한 thread를 실행
        CalFrame.getContentPane().setBackground(Color.white);
        //창의 배경색을 흰색으로 설정
        btDel.setEnabled(false); //스케줄 삭제 버튼 비활성화
        btEdit.setEnabled(false); //스케줄 수정 버튼 비활성화
        //스케줄을 클릭해서 taTodo에 끌고 오면 활성화 시킬 것임
        realDay = gregCal.get(GregorianCalendar.DAY_OF_MONTH);
        //GregorianCalendar에서 현재 일(day)을 가져온다
        realMonth = gregCal.get(GregorianCalendar.MONTH);
        //GregorianCalendar에서 현재 달(month)을 가져온다
        realYear = gregCal.get(GregorianCalendar.YEAR);
        //GregorianCalendar에서 현재 년(year)을 가져오다
        
        calMonth = realMonth;
        //달력이 보여주는 달을 저장하는 변수에 처음에는 위에서 저장한 현재 일을 가져와 저장한다
        calYear = realYear;
        //마찬가지로 년도도 현재 년도를 가져와 저장

        lbltoday.setText(realYear+"."+(realMonth+1)+"."+realDay);
        //현재 날짜를 보여주는 라벨의 텍스트를 위에서 저장한 현재 날짜를 가져와 설정
        lblSelectday.setText(realYear+"."+(realMonth+1)+"."+realDay);
        //마찬가지로 처음 열릴 때는 오늘 날을 선택한 상태이므로 선택한 날짜를 보여주는 라벨도 현재 날짜로 설정
       
        DefaultTableModel tableModel=(DefaultTableModel)calTable.getModel();
        //달력 테이블에 column을 추가하기 위한 객체
        String[] headers = {"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}; //All headers
        //달력 테이블에 추가할 column 모음
        for (int i=0; i<headers.length; i++)
        {//달력 테이블에 추가할 column 모음 길이만큼 반복문을 돌려 column추가
            tableModel.addColumn(headers[i]);
        } calTable.setColumnSelectionAllowed(true); //달력 테이블 column을 선택할 수 있게 설정
        calTable.setRowSelectionAllowed(true); //달력 테이블 row을 선택할 수있게 설정
        calTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION); // row를 여러개 선택 방지

        calTable.setRowHeight(38); //row 높이 설정
        tableModel.setRowCount(6); //row를 6개로 설정
        tableModel.setColumnCount(7); //column을 7개로 설정

        for (int i=realYear-100; i<=realYear+100; i++)
        { //년도 곰보박스에 현재 년도 -100, +100만큼 추가
            cbYear.addItem(String.valueOf(i));
        }
        selectedDate = realDay; //처음 열 때이니 선택되 날을 현재 날로 한다
        selectedMonth = realMonth+1;
        selectedYear = realYear;
        scheduleshow(selectedYear, selectedMonth, selectedDate);
        refreshCal(realMonth, realYear); //년도가 바뀌었으니 다시 계산해 달력을 보여준다
    }//GEN-LAST:event_CalFrameformWindowOpened

    private void btTodayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btTodayActionPerformed
        // today 버튼
        selectedDate = realDay; //오늘 날짜를 가져온다
        selectedMonth = realMonth+1; //오늘 달을 가져온다
        selectedYear = realYear; //오늘 년도를 가져온다
        lblSelectday.setText(realYear+"."+(realMonth+1)+"."+realDay);
        //선택된 날짜를 보여주는 라벨을 설정한다
        scheduleshow(selectedYear, selectedMonth, selectedDate);
        //선택된 날짜의 스케줄을 보여준다
        refreshCal(realMonth, realYear);
        //선택된 값이 보이는 곳으로 가야하니 다시 달력을 셋팅한다
    }//GEN-LAST:event_btTodayActionPerformed

    public void refreshCal(int month, int year){ 
        //계산해 달력을 보여주는 메소드
        //달력을 다시 보여줘야하니 달력 테이블 초기화
        for(int i=0;i<calTable.getRowCount();i++){
            for(int j=0;j<calTable.getColumnCount();j++){
                calTable.setValueAt(null, i, j); 
            }
        }
        String[] months =  {"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};
        //달력 테이블 위에 현재 달이 무엇인지 글자로 보여줌. 따라서 편하게 달을 글로 표현한 걸 배열로 저장
        GregorianCalendar calendar = new GregorianCalendar(year, month, 1); //매개변수의 년도, 월의 첫날을 가져온다
        int numOfDays = calendar.getActualMaximum(GregorianCalendar.DAY_OF_MONTH); //총 일 수 저장
        int startOfMonth=calendar.get(GregorianCalendar.DAY_OF_WEEK); // 시작일 저장
           
        lblMonth.setText(months[month]); //매개변수로 입력받은 달(0~11)을 이용해 달력이 보여주는 달의 글자를 설정
        cbYear.setSelectedItem(String.valueOf(year)); //년도 콤보박스를 매개변수 년도로 설정
           
        btNextMonth.setEnabled(true); //다음 달로 넘어가는 버튼 활성화
        btNextYear.setEnabled(true); //다음 년도로 넘어가는 버튼 활성화
        btPrevMonth.setEnabled(true); //이전 달로 넘어가는 버튼 활성화
        btPrevYear.setEnabled(true); //이전 년도로 넘어가는 버튼 활성화
        if(year<=realYear-100) { //매개변수로 들어온 년도가 현재 년도보다 100 이전이면
            btPrevYear.setEnabled(false); //이전 년도로 넘어가는 버튼 비활성화
        } if(year>=realYear+100){ //매개변수로 들어온 년도가 현재 년도보다 100 이후라면
            btNextYear.setEnabled(false); //다음 년도로 넘어가는 버튼 비활성화
        }
            
        for(int i=1;i<=numOfDays;i++){ //달력을 셋팅(위에서 저장한 총 일 수 만큼 반복)
            int row = (i+startOfMonth-2)/7; //row위치 계산
            int column  =  ((i+startOfMonth)%7-2%7 + 7)%7; //column 위치 계산
            calTable.setValueAt(i, row, column); //계산 위치로 달력 테이블에 추가
            TableCellRenderer renderer = new TableCellRenderer();
            calTable.setDefaultRenderer(calTable.getColumnClass(0), renderer);
            //달력 테이블을 다루기 위한 객체(아래 TableCellRenderer 수행)
        }
    }

    class TableCellRenderer extends DefaultTableCellRenderer
    {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value,boolean selected, boolean focused, int row, int column){   
            GregorianCalendar calendar = new GregorianCalendar(calYear, calMonth, 1); //매개변수의 년도, 월의 첫날을 가져온다
            int startOfMonth=calendar.get(GregorianCalendar.DAY_OF_WEEK); // 시작일 저장
            ArrayList<String> aday = new ArrayList<String>(); // 선택된 달에 있는 기념일들을 저장할 곳
            //디비에 date는  문자열 yyyymmdd로 들어간다. 따라서 선택된 날짜를 같은 형태 문자열로 변경
            String cal = Integer.toString(calYear)+Integer.toString(calMonth+1);
            String strQuery = "Select date From Schedule Where id = '";
            strQuery += ID + "' AND date like '";
            strQuery += cal+"%' And isAnniversary = 1"; //보여진는 달의 모든 날의 스케줄 값을 하나씩 가져올 것이므로 sql문을 이렇게 작성
            try{
                DBM.dbOpen(); //DB open
                DBM.DB_rs = DBM.DB_stmt.executeQuery(strQuery);
                while(DBM.DB_rs.next()){
                    aday.add(DBM.DB_rs.getString("date"));
                } DBM.dbClose();
            } catch (Exception e) { //예외발생시 처리
                System.out.println("SQLException : "+e.getMessage());
            }
            super.getTableCellRendererComponent(table, value, selected, focused, row, column);
            setForeground(Color.black);
            if(column==0 ||  column==6){ //sun, sat이라면
                setBackground(new Color(255,220,220)); //바탕을 빨강색으로 설정
            } else{ //나머지 요일은
                setBackground(new Color(255, 255, 255)); //바탕을 흰색으로 설정
                if(row%2 == 0 && value!=null) setBackground(new Color(234, 234, 234));
                //줄끼리 구분을 쉽게 하기 위해 짝수 줄은 바탕을 회색으로 설정
            } if(value!=null){ //만약 값이 있는 셀이라면
                for(int cnt = 0 ; cnt < aday.size() ; cnt ++){
                    if(row == (Integer.parseInt(aday.get(cnt).substring(6))+startOfMonth-2)/7 && column == ((Integer.parseInt(aday.get(cnt).substring(6))+startOfMonth)%7-2%7 + 7)%7 &&
                        calYear == Integer.parseInt(cbYear.getSelectedItem().toString()) && getMonth(lblMonth.getText()) == calMonth+1) {
                            setForeground(new Color(0,204,204)); setFont(new Font("굴림", Font.BOLD, 14));
                    }//현재 달력에서 스케줄이 있는 날짜 글자 청록색, 굵게, 크기 14로 표시
                }if(Integer.parseInt(value.toString())== selectedDate && getMonth(lblMonth.getText()) == selectedMonth && Integer.parseInt(cbYear.getSelectedItem().toString())== selectedYear)
                { //현재 보여지고 있는 달이 선택된 달이며, 선택한 년도도 보여지고 있는 년도와 같다면
                setBackground(new Color(220,220,255)); //선택된 날의 바탕은 파랑색으로 설정
                }
            }
            setBorder(null); //달력 경계선을 null을 줘서 사라지게 함
            return this; //설정한 값 리턴
        }
    }
        
    public int getMonth(String month){ //문자열로 달을 입력받아 해당하는 달의 숫자를 반환
        int monthNumber=-1; //달이 아닌 문자열이면 -1을 반환하게 됨
        if(month.equals("January")){
            monthNumber=1;
        }else if(month.equals("February")){
            monthNumber=2;
        }else if(month.equals("March")){
            monthNumber=3;
        }else if(month.equals("April")){
            monthNumber=4;
        }else if(month.equals("May")){
            monthNumber=5;
        }else if(month.equals("June")){
            monthNumber=6;
        }else if(month.equals("July")){
            monthNumber=7;
        }else if(month.equals("August")){
            monthNumber=8;
        }else if(month.equals("September")){
            monthNumber=9;
        }else if(month.equals("October")){
            monthNumber=10;
        }else if(month.equals("November")){
            monthNumber=11;
        }else if(month.equals("December")){
            monthNumber=12;
        }return monthNumber;
    }
    
    //<editor-fold defaultstate="collapsed" desc="show schedule Code"> 
    public void scheduleshow(int year, int month, int date){
        //해당 날짜의 스케줄을 보여주는 메소드
        for(int h = 0 ; h < TShowschedule.getRowCount() ; h++){
            for(int w=0 ; w < TShowschedule.getColumnCount() ; w++){
                TShowschedule.setValueAt(null, h, w);
            }
        }//선택된 날짜의 스케줄을 보여줘야하므로 스케줄 테이블을 초기화
        int cnt = 0; // 선택된 날짜에 있는 스케줄 수
        //디비에 date는  문자열 yyyymmdd로 들어간다. 따라서 선택된 날짜를 같은 형태 문자열로 변경
        String selectday = Integer.toString(year)+Integer.toString(month);
        if(date < 10) selectday += "0"+Integer.toString(date); //단 1의 자리 날짜에는 01처럼 0을 추가해준다
        else selectday += Integer.toString(date);
        String strQuery = "Select todo, isAnniversary From Schedule Where id = '";
        strQuery += ID + "' AND date = '";
        strQuery += selectday+"'";
        //클릭한 날짜의 스케줄 값만 가져올 것이므로 sql문을 이렇게 작성
        try{
            DBM.dbOpen(); //DB open
            DBM.DB_rs = DBM.DB_stmt.executeQuery(strQuery);
            while(DBM.DB_rs.next()){
                TShowschedule.setValueAt((cnt+1), cnt, 0);
                TShowschedule.setValueAt(DBM.DB_rs.getString("todo"), cnt, 1);
                if(DBM.DB_rs.getBoolean("isAnniversary")) TShowschedule.setValueAt("yes", cnt, 2);
                else TShowschedule.setValueAt("no", cnt, 2);
                cnt++;
            } //sql실행 결과 값을 돌려 스케줄에 해당하는 값만 가져와서 테이블에 보여줌
            DBM.dbClose();
        } catch (Exception e) { //예외발생시 처리
            System.out.println("SQLException : "+e.getMessage());
        } dday(); //디데이를 설정한다
    }
    
    public void dday(){ //오늘 날짜 기준으로 디데이를 구해주는 메소드
        GregorianCalendar calendar = new GregorianCalendar(selectedYear, selectedMonth-1, selectedDate);
        //선택된 날짜에 대한 객체
        String dDayString = ""; //디데이를 저장할 변수
	int dDay=((int)((calendar.getTimeInMillis() - gregCal.getTimeInMillis())/1000/60/60/24)); //선택된 날짜에서 현재 날짜를 뺌
	if(dDay == 0 && (calendar.get(GregorianCalendar.YEAR) == gregCal.get(GregorianCalendar.YEAR)) 
		&& (calendar.get(GregorianCalendar.MONTH) == gregCal.get(GregorianCalendar.MONTH))
		&& (calendar.get(GregorianCalendar.DAY_OF_MONTH) == gregCal.get(GregorianCalendar.DAY_OF_MONTH))) dDayString = "Today"; //뺀 숫자가 0고 현재 날짜와 선택된 날짜가 같다면 오늘이니 today라고 표기
	else if(dDay >=0) dDayString = "D-"+(dDay+1); //선택된 날짜가 더 크다는 것은 오늘 이후이니 D-로 표기하고
	else if(dDay < 0) dDayString = "D+"+(dDay)*(-1); //선택된 날짜가 더 작다는 것은 오늘 이전이니 D+로 표기한다
        lblDday.setText(dDayString); //이렇게 설정한 값을 디데이를 보여주는 라벨에 설정
    }
    // </editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="realtime Code"> 
    private class ThreadConrol extends Thread{ //실시간 시간을 위한 스레드
        public void run(){
            while(true){ //무한 반복한다
                try{
                    GregorianCalendar calendar = new GregorianCalendar(); //GregorianCalendar 객체
                    String amPm = (calendar.get(GregorianCalendar.AM_PM)==0?"AM":"PM"); 
                    //오전인지 오후인지 가져오는 것에서 0이 나오면 오전이니 AM을 저장하고 나머지는 오후이니 PM을 저장
                    String hour="";//시간을 저장할 변수
                    if(calendar.get(GregorianCalendar.HOUR) == 0) hour = "12"; //시간이 0이 나오면 12 저장 
                    else if(calendar.get(GregorianCalendar.HOUR) == 12) hour = " 0"; //시간이 12시가 나오면 0으로 저장                    
                    else hour = (calendar.get(GregorianCalendar.HOUR)<10?" ":"")+calendar.get(GregorianCalendar.HOUR); //시간이 10보다 작으면 띄워서 넣고 크면 그냥 저장
                    String min = (calendar.get(GregorianCalendar.MINUTE)<10?"0":"")+calendar.get(GregorianCalendar.MINUTE); //분이 10보다 작으면 0을 붙여서, 크면 그냥 저장
                    String sec = (calendar.get(GregorianCalendar.SECOND)<10?"0":"")+calendar.get(GregorianCalendar.SECOND); //초도 역시 마찬가지이다
                    lbltime.setText(amPm+" "+hour+":"+min+":"+sec); // 이렇게 가져온 시간을 실시간을 보여주는 라벨에 설정
        	    sleep(1000); //1초를 쉬고 다음 코드르 실행
		} catch(InterruptedException e){ //예외발생시 알린다
		    System.out.println("Thread:Error");
		}
            }
	}
    }
    // </editor-fold>  
 // </editor-fold> 
    
    //<editor-fold defaultstate="collapsed" desc="Menu Code"> 
    private void mnuFont_ArialMenuKeyPressed(javax.swing.event.MenuKeyEvent evt) {//GEN-FIRST:event_mnuFont_ArialMenuKeyPressed
        // Arial Key
        taTodo.setFont(new Font("Arial", Font.PLAIN, 13));
    }//GEN-LAST:event_mnuFont_ArialMenuKeyPressed

    private void mnuFont_ArialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuFont_ArialActionPerformed
        // Arial Click
        taTodo.setFont(new Font("Arial", Font.PLAIN, 13));
    }//GEN-LAST:event_mnuFont_ArialActionPerformed

    private void mnuFont_GungseoMenuKeyPressed(javax.swing.event.MenuKeyEvent evt) {//GEN-FIRST:event_mnuFont_GungseoMenuKeyPressed
        // 궁서체 Key
        taTodo.setFont(new Font("궁서체", Font.PLAIN, 13));
    }//GEN-LAST:event_mnuFont_GungseoMenuKeyPressed

    private void mnuFont_GungseoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuFont_GungseoActionPerformed
        // 궁서체 Click
        taTodo.setFont(new Font("궁서체", Font.PLAIN, 13));
    }//GEN-LAST:event_mnuFont_GungseoActionPerformed

    private void mnuFont_DotumMenuKeyPressed(javax.swing.event.MenuKeyEvent evt) {//GEN-FIRST:event_mnuFont_DotumMenuKeyPressed
        // 돋움체 Key
        taTodo.setFont(new Font("돋움체", Font.PLAIN, 13));
    }//GEN-LAST:event_mnuFont_DotumMenuKeyPressed

    private void mnuFont_DotumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuFont_DotumActionPerformed
        // 돋움체 Click
        taTodo.setFont(new Font("돋움체", Font.PLAIN, 13));
    }//GEN-LAST:event_mnuFont_DotumActionPerformed

    private void mnuFile_SetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuFile_SetActionPerformed
        // 환경설정 Click
        SetFrame.setVisible(true);
        CalFrame.setEnabled(false);
    }//GEN-LAST:event_mnuFile_SetActionPerformed

    private void mnuFile_SetMenuKeyPressed(javax.swing.event.MenuKeyEvent evt) {//GEN-FIRST:event_mnuFile_SetMenuKeyPressed
        // 환경설정 Key
        SetFrame.setVisible(true);
    }//GEN-LAST:event_mnuFile_SetMenuKeyPressed

    private void mnuFile_ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuFile_ExitActionPerformed
        // 종료하기 Click
        System.exit(0);
    }//GEN-LAST:event_mnuFile_ExitActionPerformed

    private void mnuFile_ExitMenuKeyPressed(javax.swing.event.MenuKeyEvent evt) {//GEN-FIRST:event_mnuFile_ExitMenuKeyPressed
        // 종료하기 Key
        System.exit(0);
    }//GEN-LAST:event_mnuFile_ExitMenuKeyPressed
//</editor-fold>
    
     //<editor-fold defaultstate="collapsed" desc="set button Code"> 
    private void btSettingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSettingActionPerformed
        // 환경설정 버튼 클릭
        SetFrame.setVisible(true);
    }//GEN-LAST:event_btSettingActionPerformed
//</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="Schedule Edit Code"> 
    private void btClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btClearActionPerformed
        // Clear bt
        taTodo.setText("");
        btDel.setEnabled(false);
        btEdit.setEnabled(false);
    }//GEN-LAST:event_btClearActionPerformed

    private void btAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddActionPerformed
        // Add bt
        if(taTodo.getText().length()==0){ //스케줄 내용을 적는 곳에 아무 내용이 없다면
            JOptionPane.showMessageDialog(null, "추가하실 스케줄의 내용을 입력, 할일인지 기념일인지 선택하세요.");
            return; //내용을 적고 버튼을 누르라고 알린다
        }String seldate = Integer.toString(selectedYear)+Integer.toString(selectedMonth);
        if(selectedDate < 10) seldate += "0";
        seldate += Integer.toString(selectedDate);
        String strQuery = "Insert into Schedule Values ('";
        strQuery += ID +"', '"+seldate+"', '"+taTodo.getText()+"', ";
        if(rbtAnniversary.isSelected()) strQuery += "1";
        else strQuery += "0";
        strQuery += ")";
        try{
            DBM.dbOpen(); //DB open
            DBM.DB_stmt.executeUpdate(strQuery);      
            DBM.dbClose();
        } catch (Exception e) { //예외발생시 처리
            System.out.println("SQLException : "+e.getMessage());
        } JOptionPane.showMessageDialog(null, "추가완료.");
        scheduleshow(selectedYear, selectedMonth, selectedDate);
        refreshCal(selectedMonth-1, selectedYear);
        taTodo.setText("");
    }//GEN-LAST:event_btAddActionPerformed

    private void btEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEditActionPerformed
        // Edit bt
        if(taTodo.getText().length()==0){ //스케줄 내용을 적는 곳에 아무 내용이 없다면
            JOptionPane.showMessageDialog(null, "수정하실 스케줄의 내용을 입력, 할일인지 기념일인지 선택하세요.");
            return; //내용을 적고 버튼을 누르라고 알린다
        }String seldate = Integer.toString(selectedYear)+Integer.toString(selectedMonth);
        if(selectedDate < 10) seldate += "0";
        seldate += Integer.toString(selectedDate);
        String cont = "";
        try{
            cont = TShowschedule.getValueAt(editrow, 1).toString(); //선택한 행의 todo 값을 가져옴
        }catch(Exception e){
            System.out.println(e.getMessage());
        }
        String strQuery = "Update Schedule Set todo = '";
        strQuery += taTodo.getText()+"', isAnniversary = ";
        if(rbtAnniversary.isSelected()) strQuery += "1";
        else strQuery += "0";
        strQuery += " Where todo = '"+cont+"'";
        strQuery += "And date = '"+seldate+"'";
        try{
            DBM.dbOpen(); //DB open
            DBM.DB_stmt.executeUpdate(strQuery);      
            DBM.dbClose();
        } catch (Exception e) { //예외발생시 처리
            System.out.println("SQLException : "+e.getMessage());
        } JOptionPane.showMessageDialog(null, "수정완료.");
        scheduleshow(selectedYear, selectedMonth, selectedDate);
        taTodo.setText("");
        btDel.setEnabled(false);
        btEdit.setEnabled(false);
        refreshCal(selectedMonth-1, selectedYear);
    }//GEN-LAST:event_btEditActionPerformed

    private void TShowscheduleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TShowscheduleMouseClicked
        // 스케줄 테이블 클릭
        editrow=TShowschedule.rowAtPoint(evt.getPoint());          // 마우스가 있는, 즉 선택한(클릭) 행을 가져옴
        String cont = "";
        try{
            cont = TShowschedule.getValueAt(editrow, 1).toString(); //선택한 행의 todo 값을 가져옴
        }catch(Exception e){
            System.out.println(e.getMessage());
        }
        if(cont.length() == 0){ //가져온 값의 길이가 0이면 아무것도 없는 것으로 스케줄이 없는 것이다
            btDel.setEnabled(false);
            btEdit.setEnabled(false);
            return; //따라서 아무것도 할 수 없으니 종료
        } //반명 스케줄 내용이 있다면
        if(TShowschedule.getValueAt(editrow, 2).toString().equals("yes"))  {
            rbtTodo.setSelected(false);
            rbtAnniversary.setSelected(true);
        }else {
            rbtTodo.setSelected(true);
            rbtAnniversary.setSelected(false);
        }
        taTodo.setText(cont);//taTodo에서 수정할 수 있도록 값을 가져온다
        btDel.setEnabled(true); //이 스케줄을 삭제할 수 있으니 삭제하는 버튼을 활성화
        btEdit.setEnabled(true); //수정할 수 있으니 수정 버튼 활성화
    }//GEN-LAST:event_TShowscheduleMouseClicked

    private void btDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDelActionPerformed
        // del bt
        String cont = "";
        try{
            cont = TShowschedule.getValueAt(editrow, 1).toString(); //선택한 행의 todo 값을 가져옴
        }catch(Exception e){
            System.out.println(e.getMessage());
        }
        if(cont.length()==0){ //스케줄 내용을 적는 곳에 아무 내용이 없다면
            JOptionPane.showMessageDialog(null, "삭제할 스케줄이 없습니다.");
            return; //내용을 적고 버튼을 누르라고 알린다
        }String seldate = Integer.toString(selectedYear)+Integer.toString(selectedMonth);
        if(selectedDate < 10) seldate += "0";
        seldate += Integer.toString(selectedDate);
        String strQuery = "Delete From Schedule";
        strQuery += " Where todo = '"+cont+"'";
        strQuery += " And date = '"+seldate+"'";
        try{
            DBM.dbOpen(); //DB open
            DBM.DB_stmt.executeUpdate(strQuery);      
            DBM.dbClose();
        } catch (Exception e) { //예외발생시 처리
            System.out.println("SQLException : "+e.getMessage());
        } JOptionPane.showMessageDialog(null, "삭제완료.");
        scheduleshow(selectedYear, selectedMonth, selectedDate);
        taTodo.setText("");
        btDel.setEnabled(false);
        btEdit.setEnabled(false);
        refreshCal(selectedMonth-1, selectedYear);
    }//GEN-LAST:event_btDelActionPerformed
//</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="Set Code"> 
    private void ecbEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ecbEmailActionPerformed
        // 환경설정창에서 이메일 콤보박스 클릭
        if(ecbEmail.getSelectedIndex()==4) etxfEmailKind.setEnabled(true);
        else etxfEmailKind.setEnabled(false);
        //직접입력선택시 이메일 종류를 입력할 수 있는 텍스트 박스를 보여주고
        //기존에 있는 종류를 선택하면 여전히 텍스트 박스를 보여주지 않는다
    }//GEN-LAST:event_ecbEmailActionPerformed

    private void btEmailChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEmailChangeActionPerformed
        // 이메일 변경 버튼
        if(etxfEmail.getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "이메일를 입력하고 확인해주세요");
            return;
        } etxfEmail.setText(etxfEmail.getText().replaceAll("[^\\uAC00-\\uD7A3xfe0-9a-zA-Z\\\\s]", ""));
        //특수문자, 공백, 한글 입력시 빈문자로 전환
        //다음 글자가 들어오므로 지워지는 방식(KeyTypeed Event라 마지막에 입력한 것은 gettext로 가져와지지 않아 공백으로 바뀌지 않는다)
        //마지막에 입력한 것은 이벤트로 처리를 하지 못하니 마지막으로 버튼클릭시 특수문자, 공백, 한글을 지운다
        String email = etxfEmail.getText()+"@";
        if(ecbEmail.getSelectedIndex() != 4) email += ecbEmail.getItemAt(ecbEmail.getSelectedIndex());
        else email += etxfEmailKind.getText();
        Pattern pattern=Pattern.compile("^[_a-zA-Z0-9-\\.]+@[\\.a-zA-Z0-9-]+\\.[a-zA-Z]+$");
        Matcher match=pattern.matcher(email);
        if(!match.matches()) { //이메일 형식에 맞지 않으면
            JOptionPane.showMessageDialog(null, "이메일를 유효하지 않습니다");
            return; //이메일이 유효하지 않음을 보여주고 종료
        }
        String id = "", strQuery = "Select id From [user] Where email = '";
        //user은 sql에서 예약어(a reserved word)이므로 괄호처리를 해준다
        strQuery += email+"'";
        try{ //먼저 이메일 중복을 검사해야하니 입력한 이메일을 가지고 있는 아이디를 뽑아낸다
            DBM.dbOpen(); //DB open
            DBM.DB_rs = DBM.DB_stmt.executeQuery(strQuery);
            while(DBM.DB_rs.next()){
                id = DBM.DB_rs.getString("id");
            } //sql실행 결과 값을 돌려 id에 해당하는 값만 가져와서 저장         
            DBM.dbClose();
        } catch (Exception e) { //예외발생시 처리
            System.out.println("SQLException : "+e.getMessage());
        }
        if(id.length()==0){ //결과가 없다면 중복되지 않은 이메일로 변경이 가능하다
            strQuery = "Update [user] Set email = '";
            strQuery += email + "' Where id = '"+ID+"'";
            try{ //따라서 sql문을 실행시킨다
                DBM.dbOpen(); //DB open
                DBM.DB_stmt.executeUpdate(strQuery);         
                DBM.dbClose();
            } catch (Exception e) { //예외발생시 처리
                System.out.println("SQLException : "+e.getMessage());
                return;
            } JOptionPane.showMessageDialog(null, "작성하신 이메일로 변경했습니다");
            //예외 발생시 바로 종료하니 여기까지 왔다는 것은 정상으로 이메일를 변경한 것이므로 암호 변경했음을 알림
        } else if(id.equals(ID)) { //입력한 이메일에 대해 디비로 뽑아낸 아이디가 현재 로그인한 아이디와 같다면
            JOptionPane.showMessageDialog(null, "현재와 같은 이메일입니다.");
            //현재와 같은 이메일이니 그것을 알린다
        } else{ //아이디는 나오지만 현재 로그인한 회원 것이 아니면 단순히 중복된 이메일이라고 알린다
            JOptionPane.showMessageDialog(null, "중복된 이메일입니다.");
        }
    }//GEN-LAST:event_btEmailChangeActionPerformed

    private void btPWChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPWChangeActionPerformed
        // 암호 변경 버튼 클릭시
        if(!txfPWCchange.getText().equals(txfPWchange.getText())){ //암호와 암호 확인이 같아야한다
            JOptionPane.showMessageDialog(null, "암호와 암호 확인창에 똑같이 입력해주세요.");
            return;
        } if(txfPWCchange.getText().length() < 7){ //암호는 최소 8글자가 되어야 한다
            JOptionPane.showMessageDialog(null, "암호는 최소 8글자 입니다.");
            return;
        }String strQuery = "Update [user] Set pw = '";
        strQuery += txfPWCchange.getText() + "' Where id = '"+ID+"'";
        try{ //여기까지 왔다면 조건에 충족하는 암호로 업데이트 해준다
            DBM.dbOpen(); //DB open
            DBM.DB_stmt.executeUpdate(strQuery);         
            DBM.dbClose();
        } catch (Exception e) { //예외발생시 처리
            System.out.println("SQLException : "+e.getMessage());
            return;
        } JOptionPane.showMessageDialog(null, "작성하신 암호로 변경했습니다");
        //예외 발생시 바로 종료하니 여기까지 왔다는 것은 정상으로 암호를 변경한 것이므로 암호 변경했음을 알림
    }//GEN-LAST:event_btPWChangeActionPerformed

    private void SetFrameWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_SetFrameWindowOpened
        // 환경설정 창이 열릴 때
        etxfEmailKind.setEnabled(false); //이메일 종류 입력창 비활성화 (직접입력 선택시만 활성화) 
        lbluserName_set.setText(ID+"님");
        SetFrame.getContentPane().setBackground(Color.white);
        //창의 배경색을 흰색으로 설정
    }//GEN-LAST:event_SetFrameWindowOpened

    private void etxfEmailKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_etxfEmailKeyTyped
        // 이메일 입력창에 입력할 때마다 일어나는 이벤트
        etxfEmail.setText(etxfEmail.getText().replaceAll("[^\\uAC00-\\uD7A3xfe0-9a-zA-Z\\\\s]", ""));
        //특수문자, 공백, 한글 입력시 빈문자로 전환
    }//GEN-LAST:event_etxfEmailKeyTyped

    private void btWithdrawalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btWithdrawalActionPerformed
        // 회원탈퇴 버튼 btWithdrawal
        String strQuery1 = "Delete From [user] Where id = '"+ID+"'"; //테이블이 총 3개 있으니
        String strQuery2 = "Delete From Content Where id = '"+ID+"'"; //3개 다
        String strQuery3 = "Delete From Schedule Where id = '"+ID+"'"; //해당 아이디에 해당하는 데이터를 지운다
        try{
            DBM.dbOpen(); //DB open
            DBM.DB_stmt.executeUpdate(strQuery1);      
            DBM.DB_stmt.executeUpdate(strQuery2);  
            DBM.DB_stmt.executeUpdate(strQuery3);  
            DBM.dbClose();
        } catch (Exception e) { //예외발생시 처리
            System.out.println("SQLException : "+e.getMessage());//문제가 있으면 알리고 종료
            return;
        } JOptionPane.showMessageDialog(null, "탈퇴 완료"); //문제없으면 탈퇴 완료라 알린 후
        System.exit(0); //프로그램 종료
    }//GEN-LAST:event_btWithdrawalActionPerformed
// </editor-fold> 
    
    
//<editor-fold defaultstate="collapsed" desc="Write diary code">
    private void btnmodifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnmodifyActionPerformed
        //다이어리 수정하기
        
        String seldate=Integer.toString(selectedYear)+Integer.toString(selectedMonth);
        if(selectedDate<10) seldate+="0";
        seldate+=Integer.toString(selectedDate);
        
        String strSQL = "", result ="";
        strSQL = "select * from [Content] where id = '"+ID+"' and date = '"+seldate+"'";
        try{
            DBM.dbOpen();
            DBM.DB_rs=DBM.DB_stmt.executeQuery(strSQL);
            while(DBM.DB_rs.next()){
                result = DBM.DB_rs.getString("title"); //제목 출력
            }
            DBM.DB_rs.close();
        }catch(Exception e){
            System.out.println("SQLException : "+e.getMessage());
        }
        
        if(result.length() == 0){
            JOptionPane.showMessageDialog(null, "선택한 날짜에 작성된 다이어리 내용이 없어 수정할 수 없습니다. \n 작성버튼을 이용해 저장해주세요.");
            return;
        }
        
        if (title.getText().length()==0 || contents.getText().length()==0) {
            JOptionPane.showMessageDialog(null, "제목 혹은 내용을 입력해 주세요.");
            return;
        } 
        if (title.getText().length() > 50) {
            JOptionPane.showMessageDialog(null, "제목은 50자 이내로 적어주세요.");
            return;
        }
                
        strSQL = "Update [Content] Set ";
        strSQL += "title= '"+title.getText()+"', "; //텍스트필드 제목에서 값을 불러온다
        strSQL += "contents= '"+contents.getText()+"' ";
        strSQL += "where id = '"+ID+"' and date = '"+seldate+"'";
        try{
            DBM.dbOpen();
            DBM.DB_stmt.executeUpdate(strSQL);
            DBM.dbClose();
            JOptionPane.showMessageDialog(null, "수정되었습니다.");
        }catch (Exception e){
            System.out.println("SQLException : "+e.getMessage());
        } 
    }//GEN-LAST:event_btnmodifyActionPerformed

    private void btndeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btndeleteActionPerformed
        //다이어리 삭제하기
        String seldate=Integer.toString(selectedYear)+Integer.toString(selectedMonth);
        if(selectedDate<10) seldate+="0";
        seldate+=Integer.toString(selectedDate);
        
        String strSQL = "", result ="";
        strSQL = "select * from [Content] where id = '"+ID+"' and date = '"+seldate+"'";
        try{
            DBM.dbOpen();
            DBM.DB_rs=DBM.DB_stmt.executeQuery(strSQL);
            while(DBM.DB_rs.next()){
                result = DBM.DB_rs.getString("title"); //제목 출력
            }
            DBM.DB_rs.close();
        }catch(Exception e){
            System.out.println("SQLException : "+e.getMessage());
        }
        
        if(result.length() == 0){
            JOptionPane.showMessageDialog(null, "선택한 날짜에 작성된 다이어리 내용이 없습니다.");
            return;
        } else {
            int del=JOptionPane.showConfirmDialog(null,"정말 삭제하시겠습니까?", "Confirm", JOptionPane.YES_NO_OPTION); //삭제 확인창 예/아니오
            if(del==JOptionPane.YES_OPTION){//예 버튼 눌렀을 때
                strSQL="Delete From [Content] Where date='"+seldate+"' and id = '"+ID+"'";
                try{
                    DBM.dbOpen();
                    DBM.DB_stmt.executeUpdate(strSQL);
                    DBM.dbClose();
                    JOptionPane.showMessageDialog(null, "삭제되었습니다.");
                }catch (Exception e){
                    System.out.println("SQLException : "+e.getMessage());
                } 
            }
        }
    }//GEN-LAST:event_btndeleteActionPerformed

    private void btnwriteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnwriteActionPerformed
        //다이어리 작성하기
        if (title.getText().length()==0 || contents.getText().length()==0) {
            JOptionPane.showMessageDialog(null, "제목과 내용을 입력해 주세요.");
            return;
        }
        
        if (title.getText().length() > 50) {
            JOptionPane.showMessageDialog(null, "제목은 50자 이내로 적어주세요.");
            return;
        }
        
        String seldate=Integer.toString(selectedYear)+Integer.toString(selectedMonth);
        if(selectedDate<10) seldate+="0";
        seldate+=Integer.toString(selectedDate);
        
        String strSQL = "select * from [Content] where id = '"+ID+"' and date = '"+seldate+"'";
        String result = "";
        try{
            DBM.dbOpen();
            DBM.DB_rs=DBM.DB_stmt.executeQuery(strSQL);
            while(DBM.DB_rs.next()){
                result = DBM.DB_rs.getString("title"); //제목 출력
            }
            DBM.DB_rs.close();
        }catch(Exception e){
            System.out.println("SQLException : "+e.getMessage());
        }
        
        if(result.length() != 0){
            JOptionPane.showMessageDialog(null, "이미 작성된 다이어리가 있습니다. 수정버튼을 눌러 저장해주세요.");
            return;
        }
        strSQL="Insert Into [Content] Values ('";
        strSQL+=ID+"', '"+seldate+"', '";
        strSQL+=title.getText()+"', '"+contents.getText()+"')";
                
        try{
            DBM.dbOpen();
            DBM.DB_stmt.executeUpdate(strSQL);
            DBM.dbClose();
            JOptionPane.showMessageDialog(null, "저장되었습니다.");
        }catch (Exception e){
            System.out.println("SQLException : "+ e.getMessage());
        }
    }//GEN-LAST:event_btnwriteActionPerformed

    private void btnexitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnexitActionPerformed
        DiaryFrame.setVisible(false); //다이어리 작성창 끄기
    }//GEN-LAST:event_btnexitActionPerformed

            
    private void btDiaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDiaryActionPerformed
        setdate();
        DiaryFrame.setVisible(true);
    }//GEN-LAST:event_btDiaryActionPerformed

    public void setdate(){
        txtdate.setText(selectedYear+"."+selectedMonth+"."+selectedDate); //왼쪽 상단에 선택한 날짜 출력
        title.setText(""); //날마다 바뀌어야하니 초기화
        contents.setText("");
        
        String seldate=Integer.toString(selectedYear)+Integer.toString(selectedMonth);
        if(selectedDate<10) seldate+="0";
        seldate+=Integer.toString(selectedDate);
        
        String strSQL= "Select * From [Content] Where date='";
        strSQL+=seldate+"' and id ='"+ID+"'"; //해당 날짜에 있는 다이어리 내용 불러오기
        
        try{
            DBM.dbOpen();
            DBM.DB_rs=DBM.DB_stmt.executeQuery(strSQL);
            while(DBM.DB_rs.next()){
                title.setText(DBM.DB_rs.getString("title")); //제목 출력
                contents.setText(DBM.DB_rs.getString("contents")); //내용 출력
            }
            DBM.DB_rs.close();
        }catch(Exception e){
            System.out.println("SQLException : "+e.getMessage());
        }
    }
      //</editor-fold>
// </editor-fold> 
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel CEmailPanel;
    private javax.swing.JPanel CPWPanel;
    private javax.swing.JFrame CalFrame;
    private javax.swing.JFrame DiaryFrame;
    private javax.swing.JPanel FIPanel;
    private javax.swing.JPanel FPPanel;
    private javax.swing.JPanel FindPanel;
    private javax.swing.JPanel Helppanel;
    private javax.swing.JPanel LoginPanel;
    private javax.swing.JFrame SetFrame;
    private javax.swing.JPanel SignUpPanel;
    private javax.swing.JTable TShowschedule;
    private javax.swing.JPanel UserEditPanel;
    private javax.swing.JPanel Withdrawalpanel;
    private javax.swing.JButton btAdd;
    private javax.swing.JButton btClear;
    private javax.swing.JButton btDel;
    private javax.swing.JButton btDiary;
    private javax.swing.JButton btEdit;
    private javax.swing.JButton btEmailChange;
    private javax.swing.JButton btNextMonth;
    private javax.swing.JButton btNextYear;
    private javax.swing.JButton btPWChange;
    private javax.swing.JButton btPrevMonth;
    private javax.swing.JButton btPrevYear;
    private javax.swing.JButton btSetting;
    private javax.swing.JButton btToday;
    private javax.swing.JButton btWithdrawal;
    private javax.swing.JButton btndelete;
    private javax.swing.JButton btnexit;
    private javax.swing.JButton btnmodify;
    private javax.swing.JButton btnwrite;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTable calTable;
    private javax.swing.JComboBox<String> cbYear;
    private javax.swing.JTextArea contents;
    private javax.swing.JComboBox<String> ecbEmail;
    private javax.swing.JTextField etxfEmail;
    private javax.swing.JTextField etxfEmailKind;
    private javax.swing.JButton fibtFind;
    private javax.swing.JComboBox<String> ficbEmail;
    private javax.swing.JLabel filblAt;
    private javax.swing.JLabel filblEmail;
    private javax.swing.JLabel filblFind;
    private javax.swing.JLabel filblNotice;
    private javax.swing.JTextField fitxfEmail;
    private javax.swing.JTextField fitxfEmailkind;
    private javax.swing.JButton fpbtFind;
    private javax.swing.JComboBox<String> fpcbEmail;
    private javax.swing.JLabel fplblAt;
    private javax.swing.JLabel fplblEmail;
    private javax.swing.JLabel fplblFind;
    private javax.swing.JLabel fplblID;
    private javax.swing.JLabel fplblNotice;
    private javax.swing.JTextField fptxfEmail;
    private javax.swing.JTextField fptxfEmailkind;
    private javax.swing.JTextField fptxfID;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JLabel lblAddSchedule;
    private javax.swing.JLabel lblDday;
    private javax.swing.JLabel lblHelp;
    private javax.swing.JLabel lblMonth;
    private javax.swing.JLabel lblPwchange;
    private javax.swing.JLabel lblPwchange1;
    private javax.swing.JLabel lblSelectday;
    private javax.swing.JLabel lblTitle1;
    private javax.swing.JLabel lblTitle2;
    private javax.swing.JLabel lblTitle3;
    private javax.swing.JLabel lblTitle4;
    private javax.swing.JLabel lblleft_c;
    private javax.swing.JLabel lblleft_m;
    private javax.swing.JLabel lbltime;
    private javax.swing.JLabel lbltoday;
    private javax.swing.JLabel lbluserName_cal;
    private javax.swing.JLabel lbluserName_set;
    private javax.swing.JButton lgUserimg;
    private javax.swing.JButton lgbtFind;
    private javax.swing.JButton lgbtLogin;
    private javax.swing.JButton lgbtSignup;
    private javax.swing.JLabel lglblID;
    private javax.swing.JLabel lglblLogin;
    private javax.swing.JLabel lglblPW;
    private javax.swing.JLabel lglblSignup;
    private javax.swing.JTextField lgtxfID;
    private javax.swing.JPasswordField lgtxfPW;
    private javax.swing.JPanel memoPanel;
    private javax.swing.JMenuItem mnuFile_Exit;
    private javax.swing.JMenuItem mnuFile_Set;
    private javax.swing.JMenu mnuFont;
    private javax.swing.JMenuItem mnuFont_Arial;
    private javax.swing.JMenuItem mnuFont_Dotum;
    private javax.swing.JMenuItem mnuFont_Gungseo;
    private javax.swing.JRadioButton rbtAnniversary;
    private javax.swing.JRadioButton rbtTodo;
    private javax.swing.JButton subtEmailC;
    private javax.swing.JButton subtIDC;
    private javax.swing.JButton subtSingup;
    private javax.swing.JComboBox<String> sucbEmail;
    private javax.swing.JLabel sulblAt;
    private javax.swing.JLabel sulblAthide;
    private javax.swing.JLabel sulblEmail;
    private javax.swing.JLabel sulblID;
    private javax.swing.JLabel sulblNotice;
    private javax.swing.JLabel sulblPW;
    private javax.swing.JLabel sulblPWC;
    private javax.swing.JLabel sulblSignup;
    private javax.swing.JTextField sutxfEmail;
    private javax.swing.JTextField sutxfEmailkind;
    private javax.swing.JTextField sutxfID;
    private javax.swing.JPasswordField sutxfPW;
    private javax.swing.JPasswordField sutxfPWC;
    private javax.swing.JTextArea taTodo;
    private javax.swing.JTextField title;
    private javax.swing.JPasswordField txfPWCchange;
    private javax.swing.JPasswordField txfPWchange;
    private javax.swing.JLabel txtdate;
    // End of variables declaration//GEN-END:variables

    
}
